// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.lmd.ggzy.controller.GgzyApplyTenderController;
import com.lmd.ggzy.domain.GgzyApplyTender;
import com.lmd.ggzy.service.GgzyApplyService;
import com.lmd.ggzy.service.GgzyApplyTenderService;
import com.lmd.ggzy.service.GgzyBidDocService;
import com.lmd.ggzy.service.GgzyBiddingCandidateService;
import com.lmd.ggzy.service.GgzyBiddingResNoticeService;
import com.lmd.ggzy.service.GgzyBondRecordService;
import com.lmd.ggzy.service.GgzyProspectRecordService;
import com.lmd.ggzy.service.GgzyTendersService;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect GgzyApplyTenderController_Roo_Controller {
    
    @Autowired
    GgzyApplyTenderService GgzyApplyTenderController.ggzyApplyTenderService;
    
    @Autowired
    GgzyApplyService GgzyApplyTenderController.ggzyApplyService;
    
    @Autowired
    GgzyBidDocService GgzyApplyTenderController.ggzyBidDocService;
    
    @Autowired
    GgzyBiddingCandidateService GgzyApplyTenderController.ggzyBiddingCandidateService;
    
    @Autowired
    GgzyBiddingResNoticeService GgzyApplyTenderController.ggzyBiddingResNoticeService;
    
    @Autowired
    GgzyBondRecordService GgzyApplyTenderController.ggzyBondRecordService;
    
    @Autowired
    GgzyProspectRecordService GgzyApplyTenderController.ggzyProspectRecordService;
    
    @Autowired
    GgzyTendersService GgzyApplyTenderController.ggzyTendersService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyApplyTenderController.create(@Valid GgzyApplyTender ggzyApplyTender, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyApplyTender);
            return "ggzyapplytenders/create";
        }
        uiModel.asMap().clear();
        ggzyApplyTenderService.saveGgzyApplyTender(ggzyApplyTender);
        return "redirect:/ggzyapplytenders/" + encodeUrlPathSegment(ggzyApplyTender.getApplyTenderId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyApplyTenderController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyApplyTender());
        return "ggzyapplytenders/create";
    }
    
    @RequestMapping(value = "/{applyTenderId}", produces = "text/html")
    public String GgzyApplyTenderController.show(@PathVariable("applyTenderId") String applyTenderId, Model uiModel) {
        uiModel.addAttribute("ggzyapplytender", ggzyApplyTenderService.findGgzyApplyTender(applyTenderId));
        uiModel.addAttribute("itemId", applyTenderId);
        return "ggzyapplytenders/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GgzyApplyTenderController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ggzyapplytenders", ggzyApplyTenderService.findGgzyApplyTenderEntries(firstResult, sizeNo));
            float nrOfPages = (float) ggzyApplyTenderService.countAllGgzyApplyTenders() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ggzyapplytenders", ggzyApplyTenderService.findAllGgzyApplyTenders());
        }
        return "ggzyapplytenders/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyApplyTenderController.update(@Valid GgzyApplyTender ggzyApplyTender, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyApplyTender);
            return "ggzyapplytenders/update";
        }
        uiModel.asMap().clear();
        ggzyApplyTenderService.updateGgzyApplyTender(ggzyApplyTender);
        return "redirect:/ggzyapplytenders/" + encodeUrlPathSegment(ggzyApplyTender.getApplyTenderId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{applyTenderId}", params = "form", produces = "text/html")
    public String GgzyApplyTenderController.updateForm(@PathVariable("applyTenderId") String applyTenderId, Model uiModel) {
        populateEditForm(uiModel, ggzyApplyTenderService.findGgzyApplyTender(applyTenderId));
        return "ggzyapplytenders/update";
    }
    
    @RequestMapping(value = "/{applyTenderId}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyApplyTenderController.delete(@PathVariable("applyTenderId") String applyTenderId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyApplyTender ggzyApplyTender = ggzyApplyTenderService.findGgzyApplyTender(applyTenderId);
        ggzyApplyTenderService.deleteGgzyApplyTender(ggzyApplyTender);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzyapplytenders";
    }
    
    void GgzyApplyTenderController.populateEditForm(Model uiModel, GgzyApplyTender ggzyApplyTender) {
        uiModel.addAttribute("ggzyApplyTender", ggzyApplyTender);
        uiModel.addAttribute("ggzyapplys", ggzyApplyService.findAllGgzyApplys());
        uiModel.addAttribute("ggzybiddocs", ggzyBidDocService.findAllGgzyBidDocs());
        uiModel.addAttribute("ggzybiddingcandidates", ggzyBiddingCandidateService.findAllGgzyBiddingCandidates());
        uiModel.addAttribute("ggzybiddingresnotices", ggzyBiddingResNoticeService.findAllGgzyBiddingResNotices());
        uiModel.addAttribute("ggzybondrecords", ggzyBondRecordService.findAllGgzyBondRecords());
        uiModel.addAttribute("ggzyprospectrecords", ggzyProspectRecordService.findAllGgzyProspectRecords());
        uiModel.addAttribute("ggzytenderses", ggzyTendersService.findAllGgzyTenderses());
    }
    
    String GgzyApplyTenderController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
