// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.lmd.ggzy.controller.GgzyApplyTenderController;
import com.lmd.ggzy.domain.GgzyApplyTender;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect GgzyApplyTenderController_Roo_Controller_Json {
    
    @RequestMapping(value = "/jons/{applyTenderId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> GgzyApplyTenderController.showJson(@PathVariable("applyTenderId") String applyTenderId) {
        GgzyApplyTender ggzyApplyTender = ggzyApplyTenderService.findGgzyApplyTender(applyTenderId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ggzyApplyTender == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ggzyApplyTender.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json",value="/json")
    @ResponseBody
    public ResponseEntity<String> GgzyApplyTenderController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<GgzyApplyTender> result = ggzyApplyTenderService.findAllGgzyApplyTenders();
        return new ResponseEntity<String>(GgzyApplyTender.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json", value="/json")
    public ResponseEntity<String> GgzyApplyTenderController.createFromJson(@RequestBody GgzyApplyTender ggzyApplyTender, UriComponentsBuilder uriBuilder) {
//        GgzyApplyTender ggzyApplyTender = GgzyApplyTender.fromJsonToGgzyApplyTender(json);
        ggzyApplyTenderService.saveGgzyApplyTender(ggzyApplyTender);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+ggzyApplyTender.getApplyTenderId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyApplyTenderController.createFromJsonArray(@RequestBody String json) {
        for (GgzyApplyTender ggzyApplyTender: GgzyApplyTender.fromJsonArrayToGgzyApplyTenders(json)) {
            ggzyApplyTenderService.saveGgzyApplyTender(ggzyApplyTender);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{applyTenderId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyApplyTenderController.updateFromJson(@RequestBody String json, @PathVariable("applyTenderId") String applyTenderId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        GgzyApplyTender ggzyApplyTender = GgzyApplyTender.fromJsonToGgzyApplyTender(json);
        ggzyApplyTender.setApplyTenderId(applyTenderId);
        if (ggzyApplyTenderService.updateGgzyApplyTender(ggzyApplyTender) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/json/{applyTenderId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyApplyTenderController.deleteFromJson(@PathVariable("applyTenderId") String applyTenderId) {
        GgzyApplyTender ggzyApplyTender = ggzyApplyTenderService.findGgzyApplyTender(applyTenderId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ggzyApplyTender == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ggzyApplyTenderService.deleteGgzyApplyTender(ggzyApplyTender);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
