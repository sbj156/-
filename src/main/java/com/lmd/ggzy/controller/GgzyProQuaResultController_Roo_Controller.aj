// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;
import java.util.List;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.lmd.ggzy.domain.GgzyProQuaResult;
import com.lmd.ggzy.service.GgzyApplyService;
import com.lmd.ggzy.service.GgzyProQuaResultService;
import com.lmd.ggzy.service.GgzyTendersService;

privileged aspect GgzyProQuaResultController_Roo_Controller {
    
    @Autowired
    GgzyProQuaResultService GgzyProQuaResultController.ggzyProQuaResultService;
    
    @Autowired
    GgzyTendersService GgzyProQuaResultController.ggzyTendersService;
    
    @Autowired
    GgzyApplyService GgzyProQuaResultController.applyService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyProQuaResultController.create(@Valid GgzyProQuaResult ggzyProQuaResult, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest, @RequestParam("applyIds") String[] applyIds) {
    	AjaxObject status ;
        if (bindingResult.hasErrors()) {
        	status = AjaxObject.newError(bindingResult.getFieldError().getDefaultMessage());
        }else{
        	uiModel.asMap().clear();
        	ggzyProQuaResultService.saveGgzyProQuaResult(ggzyProQuaResult);
        	applyService.updateOfficial(applyIds, true);
        	status = AjaxObject.newOk(ControllerConst.SAVE_SUCCESS, true);
        }
        uiModel.addAttribute(ControllerConst.STATUS, status);
        return ControllerConst.JSON_STATUS_VIEW;
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyProQuaResultController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyProQuaResult());
        return "ggzyproquaresults/create";
    }
    
    @RequestMapping(value = "/{proQuaResultId}", produces = "text/html")
    public String GgzyProQuaResultController.show(@PathVariable("proQuaResultId") String proQuaResultId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzyproquaresult", ggzyProQuaResultService.findGgzyProQuaResult(proQuaResultId));
        uiModel.addAttribute("itemId", proQuaResultId);
        return "ggzyproquaresults/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GgzyProQuaResultController.list(ServletRequest request, Page page, Model uiModel) {
    	Specification<GgzyProQuaResult> spec = DynamicSpecifications.bySearchFilter(request, GgzyProQuaResult.class);
    	List<GgzyProQuaResult> list = ggzyProQuaResultService.findByExample(spec, page);
    	uiModel.addAttribute("list", list);
        return "ggzyproquaresults/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyProQuaResultController.update(@Valid GgzyProQuaResult ggzyProQuaResult, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyProQuaResult);
            return "ggzyproquaresults/update";
        }
        uiModel.asMap().clear();
        ggzyProQuaResultService.updateGgzyProQuaResult(ggzyProQuaResult);
        return "redirect:/ggzyproquaresults/" + encodeUrlPathSegment(ggzyProQuaResult.getProQuaResultId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{proQuaResultId}", params = "form", produces = "text/html")
    public String GgzyProQuaResultController.updateForm(@PathVariable("proQuaResultId") String proQuaResultId, Model uiModel) {
        populateEditForm(uiModel, ggzyProQuaResultService.findGgzyProQuaResult(proQuaResultId));
        return "ggzyproquaresults/update";
    }
    
    @RequestMapping(value = "/{proQuaResultId}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyProQuaResultController.delete(@PathVariable("proQuaResultId") String proQuaResultId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyProQuaResult ggzyProQuaResult = ggzyProQuaResultService.findGgzyProQuaResult(proQuaResultId);
        ggzyProQuaResultService.deleteGgzyProQuaResult(ggzyProQuaResult);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzyproquaresults";
    }
    
    void GgzyProQuaResultController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ggzyProQuaResult_resulttime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void GgzyProQuaResultController.populateEditForm(Model uiModel, GgzyProQuaResult ggzyProQuaResult) {
        uiModel.addAttribute("ggzyProQuaResult", ggzyProQuaResult);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzytenderses", ggzyTendersService.findAllGgzyTenderses());
    }
    
    String GgzyProQuaResultController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
