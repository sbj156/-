// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.lmd.ggzy.controller.GgzyBaseProController;
import com.lmd.ggzy.domain.GgzyBasePro;
import java.util.List;

import javax.validation.Valid;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect GgzyBaseProController_Roo_Controller_Json {

	@RequestMapping(value = "/josn/{baseProId}", method = RequestMethod.GET, headers = "Accept=application/json")
	@ResponseBody
	public ResponseEntity<String> GgzyBaseProController.showJson(
			@PathVariable("baseProId") String baseProId) {
		GgzyBasePro ggzyBasePro = ggzyBaseProService.findGgzyBasePro(baseProId);
		HttpHeaders headers = new HttpHeaders();
		headers.add("Content-Type", "application/json; charset=utf-8");
		if (ggzyBasePro == null) {
			return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<String>(ggzyBasePro.toJson(), headers,
				HttpStatus.OK);
	}

	/*
	 * @RequestMapping(headers = "Accept=application/json")
	 * 
	 * @ResponseBody public ResponseEntity<String>
	 * GgzyBaseProController.listJson() { HttpHeaders headers = new
	 * HttpHeaders(); headers.add("Content-Type",
	 * "application/json; charset=utf-8"); List<GgzyBasePro> result =
	 * ggzyBaseProService.findAllGgzyBaseProes(); return new
	 * ResponseEntity<String>(GgzyBasePro.toJsonArray(result), headers,
	 * HttpStatus.OK); }
	 */

	@RequestMapping(method = RequestMethod.POST, value = "/create", headers = "Accept=application/json")
	public @ResponseBody
	String GgzyBaseProController.createFromJson(
			@Valid GgzyBasePro ggzyBasePro, UriComponentsBuilder uriBuilder) {
		ggzyBaseProService.saveGgzyBasePro(ggzyBasePro);
		/*
		 * HttpHeaders headers = new HttpHeaders(); headers.add("Content-Type",
		 * "application/json"); RequestMapping a = (RequestMapping)
		 * getClass().getAnnotation(RequestMapping.class);
		 * headers.add("Location"
		 * ,uriBuilder.path(a.value()[0]+"/"+ggzyBasePro.getBaseProId
		 * ().toString()).build().toUriString());
		 */
		// return new ResponseEntity<String>(headers, HttpStatus.CREATED);
//		ggzyBasePro = ggzyBaseProService.findGgzyBasePro(ggzyBasePro.getBaseProId());
		return AjaxObject.newOk("success,code["+ ggzyBasePro.getProCode() +"]").toString();
	}

	@RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
	public ResponseEntity<String> GgzyBaseProController.createFromJsonArray(
			@RequestBody String json) {
		for (GgzyBasePro ggzyBasePro : GgzyBasePro
				.fromJsonArrayToGgzyBaseProes(json)) {
			ggzyBaseProService.saveGgzyBasePro(ggzyBasePro);
		}
		HttpHeaders headers = new HttpHeaders();
		headers.add("Content-Type", "application/json");
		return new ResponseEntity<String>(headers, HttpStatus.CREATED);
	}

	/*@RequestMapping(value = "/{baseProId}", method = RequestMethod.PUT, headers = "Accept=application/json")
	public ResponseEntity<String> GgzyBaseProController.updateFromJson(
			@RequestBody String json,
			@PathVariable("baseProId") String baseProId) {
		HttpHeaders headers = new HttpHeaders();
		headers.add("Content-Type", "application/json");
		GgzyBasePro ggzyBasePro = GgzyBasePro.fromJsonToGgzyBasePro(json);
		ggzyBasePro.setBaseProId(baseProId);
		if (ggzyBaseProService.updateGgzyBasePro(ggzyBasePro) == null) {
			return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<String>(headers, HttpStatus.OK);
	}*/

	@RequestMapping(value = "/json/{baseProId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
	public ResponseEntity<String> GgzyBaseProController.deleteFromJson(
			@PathVariable("baseProId") String baseProId) {
		GgzyBasePro ggzyBasePro = ggzyBaseProService.findGgzyBasePro(baseProId);
		HttpHeaders headers = new HttpHeaders();
		headers.add("Content-Type", "application/json");
		if (ggzyBasePro == null) {
			return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
		}
		ggzyBaseProService.deleteGgzyBasePro(ggzyBasePro);
		return new ResponseEntity<String>(headers, HttpStatus.OK);
	}

}
