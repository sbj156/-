// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.lmd.ggzy.domain.GgzyBusinessType;
import com.lmd.ggzy.domain.GgzyBusinessTypeMajor;
import com.lmd.ggzy.domain.GgzyBusinessTypeWay;
import com.lmd.ggzy.domain.GgzyBusinessWay;
import com.lmd.ggzy.domain.GgzyMajorType;
import com.lmd.ggzy.domain.GgzyBusinessType.VirtualSpecification;
import com.lmd.ggzy.domain.pk.GgzyBusinessTypeMajorPK;
import com.lmd.ggzy.domain.pk.GgzyBusinessTypeWayPK;
import com.lmd.ggzy.service.BidOpenningTypeService;
import com.lmd.ggzy.service.GgzyBusinessTypeMajorService;
import com.lmd.ggzy.service.GgzyBusinessTypeService;
import com.lmd.ggzy.service.GgzyBusinessTypeWayService;
import com.lmd.ggzy.service.GgzyBusinessWayService;
import com.lmd.ggzy.service.GgzyMajorTypeService;

privileged aspect GgzyBusinessTypeController_Roo_Controller {

	@Autowired
	GgzyBusinessTypeService GgzyBusinessTypeController.ggzyBusinessTypeService;

	@Autowired
	GgzyBusinessWayService GgzyBusinessTypeController.ggzyBusinessWayService;

	@Autowired
	GgzyMajorTypeService GgzyBusinessTypeController.ggzyMajorTypeService;

	@Autowired
	GgzyBusinessTypeWayService GgzyBusinessTypeController.ggzyBusinessTypeWayService;
	@Autowired
	GgzyBusinessTypeMajorService GgzyBusinessTypeController.ggzyBusinessTypeMajorService;

	@Autowired
	BidOpenningTypeService GgzyBusinessTypeController.openningTypeService;
	
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public @ResponseBody
	String GgzyBusinessTypeController.create(@Valid GgzyBusinessType ggzyBusinessType, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
		if (bindingResult.hasErrors()) {
			populateEditForm(uiModel, ggzyBusinessType);
			return "ggzybusinesstypes/create";
		}
		uiModel.asMap().clear();
		ggzyBusinessTypeService.saveGgzyBusinessType(ggzyBusinessType);
		return AjaxObject.newOk("添加成功").toString();
	}

	@RequestMapping(params = "form", produces = "text/html")
	public String GgzyBusinessTypeController.createForm(Model uiModel) {
		populateEditForm(uiModel, new GgzyBusinessType());
		return "ggzybusinesstypes/create";
	}

	@RequestMapping(value = "/{businessTypeId}", produces = "text/html")
	public String GgzyBusinessTypeController.show(@PathVariable("businessTypeId") String businessTypeId, Model uiModel) {
		uiModel.addAttribute("ggzybusinesstype", ggzyBusinessTypeService.findGgzyBusinessType(businessTypeId));
		uiModel.addAttribute("itemId", businessTypeId);
		return "ggzybusinesstypes/show";
	}

	@RequestMapping
	public String GgzyBusinessTypeController.list(ServletRequest request, Page page, Model map) {
		Specification<GgzyBusinessType> specification = DynamicSpecifications.bySearchFilter(request, GgzyBusinessType.class);
		map.addAttribute("page", page);
		List<GgzyBusinessType> list = ggzyBusinessTypeService.findByExample(specification, page);
		map.addAttribute("list", list);
		return "ggzybusinesstypes/list";
	}

	@RequestMapping(value = "/update")
	public @ResponseBody
	String GgzyBusinessTypeController.update(@Valid GgzyBusinessType ggzyBusinessType, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
		if (bindingResult.hasErrors()) {
			populateEditForm(uiModel, ggzyBusinessType);
			return AjaxObject.newError("修改失败").toString();
		}
		uiModel.asMap().clear();
		ggzyBusinessTypeService.updateGgzyBusinessType(ggzyBusinessType);
		return AjaxObject.newOk("修改成功！").toString();
	}

	@RequestMapping(value = "/{businessTypeId}", params = "form", produces = "text/html")
	public String GgzyBusinessTypeController.updateForm(@PathVariable("businessTypeId") String businessTypeId, Model uiModel) {
		populateEditForm(uiModel, ggzyBusinessTypeService.findGgzyBusinessType(businessTypeId));
		return "ggzybusinesstypes/update";
	}

	@RequestMapping(value = "/delete", produces = "text/html")
	public String GgzyBusinessTypeController.delete(@RequestParam("ids") String[] businessTypeIds, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
		if (businessTypeIds != null) {
			for (String id : businessTypeIds) {
				GgzyBusinessType entity = ggzyBusinessTypeService.findGgzyBusinessType(id);
				ggzyBusinessTypeService.deleteGgzyBusinessType(entity);
			}
		}
		uiModel.addAttribute(ControllerConst.STATUS, AjaxObject.newOk("删除成功！").setCallbackType(""));
		return ControllerConst.JSON_STATUS_VIEW;
	}

	void GgzyBusinessTypeController.populateEditForm(Model uiModel, GgzyBusinessType ggzyBusinessType) {
		uiModel.addAttribute("ggzyBusinessType", ggzyBusinessType);
		uiModel.addAttribute("ggzybusinessways", ggzyBusinessWayService.findAllGgzyBusinessWays());
		uiModel.addAttribute("ggzymajortypes", ggzyMajorTypeService.findAllGgzyMajorTypes());
		uiModel.addAttribute("openningTypes", openningTypeService.findAllBidOpenningTypes());
		uiModel.addAttribute("virtualTypes", ggzyBusinessTypeService.findByExample(new VirtualSpecification(true)));
		
		Map<String, String> virtualType = new HashMap<String, String>();
		virtualType.put("0", "否");
		virtualType.put("1", "是");
		uiModel.addAttribute("virtualType", virtualType);
	}

	String GgzyBusinessTypeController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
		String enc = httpServletRequest.getCharacterEncoding();
		if (enc == null) {
			enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
		}
		try {
			pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
		} catch (UnsupportedEncodingException uee) {
		}
		return pathSegment;
	}

	@RequestMapping(value = "/linkbusinessway/{businessTypeId}", method = { RequestMethod.GET, RequestMethod.POST })
	public String GgzyBusinessTypeController.linkBusinessWays(Model map, @PathVariable("businessTypeId") String businessTypeId) {
		GgzyBusinessType ggzyBusinessType = ggzyBusinessTypeService.findGgzyBusinessType(businessTypeId);
		List<GgzyBusinessWay> ggzyBusinessWays = ggzyBusinessWayService.findAllGgzyBusinessWays();

		for (GgzyBusinessTypeWay ggzyBusinessTyeWay : ggzyBusinessType.getGgzyBusinessTypeWays()) {
			for (GgzyBusinessWay way : ggzyBusinessWays) {
				if (way.getBusinessWayId().equals(ggzyBusinessTyeWay.getBusinessWay().getBusinessWayId())) {
					ggzyBusinessWays.remove(way);
					break;
				}
			}
		}
		map.addAttribute("businessType", ggzyBusinessType);
		map.addAttribute("businessWays", ggzyBusinessWays);
		return "ggzybusinesstypes/linkbusinessway";
	}

	@RequestMapping(value = "/linkmajortype/{businessTypeId}", method = { RequestMethod.GET, RequestMethod.POST })
	public String GgzyBusinessTypeController.linkMajorTypes(Model map, @PathVariable("businessTypeId") String businessTypeId) {
		GgzyBusinessType ggzyBusinessType = ggzyBusinessTypeService.findGgzyBusinessType(businessTypeId);
		List<GgzyMajorType> ggzyMajorTypes = ggzyMajorTypeService.findAllGgzyMajorTypes();
		for (GgzyBusinessTypeMajor ggzyBusinessTypeMajor : ggzyBusinessType.getGgzyBusinessTypeMajors()) {
			for (GgzyMajorType type : ggzyMajorTypes) {
				if (type.getMajorTypeId().equals(ggzyBusinessTypeMajor.getMajorType().getMajorTypeId())) {
					ggzyMajorTypes.remove(type);
					break;
				}
			}
		}
		map.addAttribute("businessType", ggzyBusinessType);
		map.addAttribute("majorTypes", ggzyMajorTypes);
		return "ggzybusinesstypes/linkmajortype";
	}

	@RequestMapping(value = "/typeway/create", method = { RequestMethod.POST })
	public @ResponseBody
	void GgzyBusinessTypeController.linkBusinessWay(@Valid GgzyBusinessTypeWay businessTypeWay) {
		ggzyBusinessTypeWayService.saveGgzyBusinessTypeWay(businessTypeWay);
	}

	@RequestMapping(value = "/typeway/delete", method = { RequestMethod.POST })
	public @ResponseBody
	void GgzyBusinessTypeController.deleteBusinessWay(@Valid GgzyBusinessTypeWayPK pk) {
		GgzyBusinessTypeWay businessTypeWay = ggzyBusinessTypeWayService.findGgzyBusinessTypeWay(pk);
		ggzyBusinessTypeWayService.deleteGgzyBusinessTypeWay(businessTypeWay);
	}

	@RequestMapping(value = "/typemajor/create")
	public @ResponseBody
	void GgzyBusinessTypeController.linkMajorTyppe(@Valid GgzyBusinessTypeMajor businessTypeMajor) {
		ggzyBusinessTypeMajorService.saveGgzyBusinessTypeMajor(businessTypeMajor);
	}

	@RequestMapping(value = "/typemajor/delete")
	public @ResponseBody
	void GgzyBusinessTypeController.delteMajorTyppe(@Valid GgzyBusinessTypeMajorPK pk) {
		GgzyBusinessTypeMajor ggzyBusinessTypeMajor = ggzyBusinessTypeMajorService.findGgzyBusinessTypeMajor(pk);
		ggzyBusinessTypeMajorService.deleteGgzyBusinessTypeMajor(ggzyBusinessTypeMajor);
	}

}
