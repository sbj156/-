// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.lmd.ggzy.controller.GgzyBidInvitationController;
import com.lmd.ggzy.domain.GgzyBidInvitation;
import com.lmd.ggzy.service.GgzyBidInvitationService;
import com.lmd.ggzy.service.GgzyTendersService;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect GgzyBidInvitationController_Roo_Controller {
    
    @Autowired
    GgzyBidInvitationService GgzyBidInvitationController.ggzyBidInvitationService;
    
    @Autowired
    GgzyTendersService GgzyBidInvitationController.ggzyTendersService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyBidInvitationController.create(@Valid GgzyBidInvitation ggzyBidInvitation, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyBidInvitation);
            return "ggzybidinvitations/create";
        }
        uiModel.asMap().clear();
        ggzyBidInvitationService.saveGgzyBidInvitation(ggzyBidInvitation);
        return "redirect:/ggzybidinvitations/" + encodeUrlPathSegment(ggzyBidInvitation.getBidInvitationId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyBidInvitationController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyBidInvitation());
        return "ggzybidinvitations/create";
    }
    
    @RequestMapping(value = "/{bidInvitationId}", produces = "text/html")
    public String GgzyBidInvitationController.show(@PathVariable("bidInvitationId") String bidInvitationId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzybidinvitation", ggzyBidInvitationService.findGgzyBidInvitation(bidInvitationId));
        uiModel.addAttribute("itemId", bidInvitationId);
        return "ggzybidinvitations/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GgzyBidInvitationController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ggzybidinvitations", ggzyBidInvitationService.findGgzyBidInvitationEntries(firstResult, sizeNo));
            float nrOfPages = (float) ggzyBidInvitationService.countAllGgzyBidInvitations() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ggzybidinvitations", ggzyBidInvitationService.findAllGgzyBidInvitations());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ggzybidinvitations/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyBidInvitationController.update(@Valid GgzyBidInvitation ggzyBidInvitation, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyBidInvitation);
            return "ggzybidinvitations/update";
        }
        uiModel.asMap().clear();
        ggzyBidInvitationService.updateGgzyBidInvitation(ggzyBidInvitation);
        return "redirect:/ggzybidinvitations/" + encodeUrlPathSegment(ggzyBidInvitation.getBidInvitationId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{bidInvitationId}", params = "form", produces = "text/html")
    public String GgzyBidInvitationController.updateForm(@PathVariable("bidInvitationId") String bidInvitationId, Model uiModel) {
        populateEditForm(uiModel, ggzyBidInvitationService.findGgzyBidInvitation(bidInvitationId));
        return "ggzybidinvitations/update";
    }
    
    @RequestMapping(value = "/{bidInvitationId}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyBidInvitationController.delete(@PathVariable("bidInvitationId") String bidInvitationId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyBidInvitation ggzyBidInvitation = ggzyBidInvitationService.findGgzyBidInvitation(bidInvitationId);
        ggzyBidInvitationService.deleteGgzyBidInvitation(ggzyBidInvitation);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzybidinvitations";
    }
    
    void GgzyBidInvitationController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ggzyBidInvitation_tendererdocgaintime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ggzyBidInvitation_biddocsubendtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ggzyBidInvitation_replyendtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ggzyBidInvitation_invitetime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void GgzyBidInvitationController.populateEditForm(Model uiModel, GgzyBidInvitation ggzyBidInvitation) {
        uiModel.addAttribute("ggzyBidInvitation", ggzyBidInvitation);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzytenderses", ggzyTendersService.findAllGgzyTenderses());
    }
    
    String GgzyBidInvitationController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
