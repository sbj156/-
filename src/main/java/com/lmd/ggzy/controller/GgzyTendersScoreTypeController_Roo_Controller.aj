// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;
import java.util.List;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.lmd.ggzy.domain.GgzyTendersScoreType;
import com.lmd.ggzy.domain.pk.GgzyTendersScoreTypePk;
import com.lmd.ggzy.service.GgzyTendersScoreTypeService;

privileged aspect GgzyTendersScoreTypeController_Roo_Controller {
    
    @Autowired
    GgzyTendersScoreTypeService GgzyTendersScoreTypeController.ggzyTendersScoreTypeService;
    
    @RequestMapping(method = RequestMethod.POST,value="/create", produces = "text/html")
    public String GgzyTendersScoreTypeController.create(@Valid GgzyTendersScoreType GgzyTendersScoreType, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, GgzyTendersScoreType);
            return "ggzytendersscoretypes/create";
        }
        uiModel.asMap().clear();
        ggzyTendersScoreTypeService.saveGgzyTendersScoreType(GgzyTendersScoreType);
        return null;
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyTendersScoreTypeController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyTendersScoreType());
        return "ggzytendersscoretypes/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String GgzyTendersScoreTypeController.show(@PathVariable("id") GgzyTendersScoreTypePk id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("GgzyTendersScoreType", ggzyTendersScoreTypeService.findGgzyTendersScoreType(id));
        uiModel.addAttribute("itemId", id);
        return "ggzytendersscoretypes/show";
    }
    
    @RequestMapping(produces = "text/html")
   /* public String GgzyTendersScoreTypeController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ggzytendersscoretypes", ggzyTendersScoreTypeService.findGgzyTendersScoreTypeEntries(firstResult, sizeNo));
            float nrOfPages = (float) ggzyTendersScoreTypeService.countAllGgzyTendersScoreTypes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ggzytendersscoretypes", ggzyTendersScoreTypeService.findAllGgzyTendersScoreTypes());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ggzytendersscoretypes/list";
    }*/
    public String GgzyTendersScoreTypeController.list(ServletRequest request, Page page, Model map) {
		Specification<GgzyTendersScoreType> specification = DynamicSpecifications.bySearchFilter(request, GgzyTendersScoreType.class);
//		List<User> users = ggzyTendersScoreTypeService.
		map.addAttribute("page", page);
		List<GgzyTendersScoreType> list = ggzyTendersScoreTypeService.findByExample(specification, page);
		map.addAttribute("attachments", list);
		return "ggzytendersscoretypes/list";
	}
    
    @RequestMapping(method = RequestMethod.PUT,value="/update", produces = "text/html")
    public String GgzyTendersScoreTypeController.update(@Valid GgzyTendersScoreType GgzyTendersScoreType, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, GgzyTendersScoreType);
            return "ggzytendersscoretypes/update";
        }
        uiModel.asMap().clear();
        ggzyTendersScoreTypeService.updateGgzyTendersScoreType(GgzyTendersScoreType);
        return null;
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String GgzyTendersScoreTypeController.updateForm(@PathVariable("id") GgzyTendersScoreTypePk id, Model uiModel) {
        populateEditForm(uiModel, ggzyTendersScoreTypeService.findGgzyTendersScoreType(id));
        return "ggzytendersscoretypes/update";
    }
    
    @RequestMapping(value = "/delete/{id}")
    public String GgzyTendersScoreTypeController.delete(@PathVariable("id") GgzyTendersScoreTypePk id,Model uiModel) {
    	/**
    	 * , @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, 
    	 */
    	
        GgzyTendersScoreType GgzyTendersScoreType = ggzyTendersScoreTypeService.findGgzyTendersScoreType(id);
        ggzyTendersScoreTypeService.deleteGgzyTendersScoreType(GgzyTendersScoreType);
        uiModel.asMap().clear();
//        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
//        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzytendersscoretypes";
    }
    void GgzyTendersScoreTypeController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("GgzyTendersScoreType_uplodtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void GgzyTendersScoreTypeController.populateEditForm(Model uiModel, GgzyTendersScoreType GgzyTendersScoreType) {
        uiModel.addAttribute("GgzyTendersScoreType", GgzyTendersScoreType);
        addDateTimeFormatPatterns(uiModel);
    }
    
    String GgzyTendersScoreTypeController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
