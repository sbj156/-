// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.lmd.ggzy.controller.GgzyProQuaApplyDocController;
import com.lmd.ggzy.domain.GgzyProQuaApplyDoc;
import com.lmd.ggzy.service.GgzyProQuaApplyDocService;
import com.lmd.ggzy.service.GgzyQuaResNoticeService;
import com.lmd.ggzy.service.GgzyTendersService;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect GgzyProQuaApplyDocController_Roo_Controller {
    
    @Autowired
    GgzyProQuaApplyDocService GgzyProQuaApplyDocController.ggzyProQuaApplyDocService;
    
    @Autowired
    GgzyQuaResNoticeService GgzyProQuaApplyDocController.ggzyQuaResNoticeService;
    
    @Autowired
    GgzyTendersService GgzyProQuaApplyDocController.ggzyTendersService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyProQuaApplyDocController.create(@Valid GgzyProQuaApplyDoc ggzyProQuaApplyDoc, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyProQuaApplyDoc);
            return "ggzyproquaapplydocs/create";
        }
        uiModel.asMap().clear();
        ggzyProQuaApplyDocService.saveGgzyProQuaApplyDoc(ggzyProQuaApplyDoc);
        return "redirect:/ggzyproquaapplydocs/" + encodeUrlPathSegment(ggzyProQuaApplyDoc.getProQuaApplyDocId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyProQuaApplyDocController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyProQuaApplyDoc());
        return "ggzyproquaapplydocs/create";
    }
    
    @RequestMapping(value = "/{proQuaApplyDocId}", produces = "text/html")
    public String GgzyProQuaApplyDocController.show(@PathVariable("proQuaApplyDocId") String proQuaApplyDocId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzyproquaapplydoc", ggzyProQuaApplyDocService.findGgzyProQuaApplyDoc(proQuaApplyDocId));
        uiModel.addAttribute("itemId", proQuaApplyDocId);
        return "ggzyproquaapplydocs/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GgzyProQuaApplyDocController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ggzyproquaapplydocs", ggzyProQuaApplyDocService.findGgzyProQuaApplyDocEntries(firstResult, sizeNo));
            float nrOfPages = (float) ggzyProQuaApplyDocService.countAllGgzyProQuaApplyDocs() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ggzyproquaapplydocs", ggzyProQuaApplyDocService.findAllGgzyProQuaApplyDocs());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ggzyproquaapplydocs/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyProQuaApplyDocController.update(@Valid GgzyProQuaApplyDoc ggzyProQuaApplyDoc, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyProQuaApplyDoc);
            return "ggzyproquaapplydocs/update";
        }
        uiModel.asMap().clear();
        ggzyProQuaApplyDocService.updateGgzyProQuaApplyDoc(ggzyProQuaApplyDoc);
        return "redirect:/ggzyproquaapplydocs/" + encodeUrlPathSegment(ggzyProQuaApplyDoc.getProQuaApplyDocId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{proQuaApplyDocId}", params = "form", produces = "text/html")
    public String GgzyProQuaApplyDocController.updateForm(@PathVariable("proQuaApplyDocId") String proQuaApplyDocId, Model uiModel) {
        populateEditForm(uiModel, ggzyProQuaApplyDocService.findGgzyProQuaApplyDoc(proQuaApplyDocId));
        return "ggzyproquaapplydocs/update";
    }
    
    @RequestMapping(value = "/{proQuaApplyDocId}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyProQuaApplyDocController.delete(@PathVariable("proQuaApplyDocId") String proQuaApplyDocId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyProQuaApplyDoc ggzyProQuaApplyDoc = ggzyProQuaApplyDocService.findGgzyProQuaApplyDoc(proQuaApplyDocId);
        ggzyProQuaApplyDocService.deleteGgzyProQuaApplyDoc(ggzyProQuaApplyDoc);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzyproquaapplydocs";
    }
    
    void GgzyProQuaApplyDocController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ggzyProQuaApplyDoc_subtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void GgzyProQuaApplyDocController.populateEditForm(Model uiModel, GgzyProQuaApplyDoc ggzyProQuaApplyDoc) {
        uiModel.addAttribute("ggzyProQuaApplyDoc", ggzyProQuaApplyDoc);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzyquaresnotices", ggzyQuaResNoticeService.findAllGgzyQuaResNotices());
        uiModel.addAttribute("ggzytenderses", ggzyTendersService.findAllGgzyTenderses());
    }
    
    String GgzyProQuaApplyDocController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
