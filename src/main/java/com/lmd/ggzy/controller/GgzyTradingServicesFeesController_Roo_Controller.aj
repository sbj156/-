// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.lmd.ggzy.controller.GgzyTradingServicesFeesController;
import com.lmd.ggzy.domain.GgzyNoticeTenders;
import com.lmd.ggzy.domain.GgzyTenders;
import com.lmd.ggzy.domain.GgzyTradingServicesFees;
import com.lmd.ggzy.domain.pk.GgzyNoticeTendersPk;
import com.lmd.ggzy.domain.pk.GgzyRefTenderApplyPk;
import com.lmd.ggzy.service.GgzyApplyTenderService;
import com.lmd.ggzy.service.GgzyNoticeTendersService;
import com.lmd.ggzy.service.GgzyTendersService;
import com.lmd.ggzy.service.GgzyTradingServicesFeesService;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect GgzyTradingServicesFeesController_Roo_Controller {

	@Autowired
	GgzyTradingServicesFeesService GgzyTradingServicesFeesController.ggzyTradingServicesFeesService;

	@Autowired
	GgzyApplyTenderService GgzyTradingServicesFeesController.applyTenderService;

	@Autowired
	GgzyTendersService GgzyTradingServicesFeesController.tendersService;

	@Autowired
	GgzyNoticeTendersService GgzyTradingServicesFeesController.noticeTendersService;
	
	@RequestMapping(method = RequestMethod.POST, produces = "text/html")
	public String GgzyTradingServicesFeesController.create(@Valid GgzyTradingServicesFees ggzyTradingServicesFees, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
		AjaxObject status = null;
		if (bindingResult.hasErrors()) {
			populateEditForm(uiModel, ggzyTradingServicesFees);
			status = AjaxObject.newError(bindingResult.getFieldError().getDefaultMessage());
		} else {
			uiModel.asMap().clear();
			ggzyTradingServicesFeesService.saveGgzyTradingServicesFees(ggzyTradingServicesFees);
			status = AjaxObject.newOk(ControllerConst.SAVE_SUCCESS, true);
		}
		uiModel.addAttribute(ControllerConst.STATUS, status);
		return ControllerConst.JSON_STATUS_VIEW;
	}

	@RequestMapping(params = "tendersId", produces = "text/html")
	public String GgzyTradingServicesFeesController.createForm(Model uiModel, @RequestParam("tendersId") GgzyNoticeTendersPk tendersId) {
		populateEditForm(uiModel, new GgzyTradingServicesFees());
		GgzyNoticeTenders noticeTenders = noticeTendersService.findGgzyNoticeTenders(tendersId);
		uiModel.addAttribute("noticeTenders", noticeTenders);
		return "ggzytradingservicesfeeses/create";
	}

	@RequestMapping(value = "/{id}", produces = "text/html")
	public String GgzyTradingServicesFeesController.show(@PathVariable("id") GgzyNoticeTendersPk id, Model uiModel) {
		addDateTimeFormatPatterns(uiModel);
		GgzyNoticeTenders noticeTenders = noticeTendersService.findGgzyNoticeTenders(id);
		uiModel.addAttribute("noticeTenders", noticeTenders);
		return "ggzytradingservicesfeeses/show";
	}

	@RequestMapping(produces = "text/html")
	public String GgzyTradingServicesFeesController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
		if (page != null || size != null) {
			int sizeNo = size == null ? 10 : size.intValue();
			final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
			uiModel.addAttribute("ggzytradingservicesfeeses", ggzyTradingServicesFeesService.findGgzyTradingServicesFeesEntries(firstResult, sizeNo));
			float nrOfPages = (float) ggzyTradingServicesFeesService.countAllGgzyTradingServicesFeeses() / sizeNo;
			uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
		} else {
			uiModel.addAttribute("ggzytradingservicesfeeses", ggzyTradingServicesFeesService.findAllGgzyTradingServicesFeeses());
		}
		addDateTimeFormatPatterns(uiModel);
		return "ggzytradingservicesfeeses/list";
	}

	@RequestMapping(method = RequestMethod.PUT, produces = "text/html")
	public String GgzyTradingServicesFeesController.update(@Valid GgzyTradingServicesFees ggzyTradingServicesFees, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
		if (bindingResult.hasErrors()) {
			populateEditForm(uiModel, ggzyTradingServicesFees);
			return "ggzytradingservicesfeeses/update";
		}
		uiModel.asMap().clear();
		ggzyTradingServicesFeesService.updateGgzyTradingServicesFees(ggzyTradingServicesFees);
		return "redirect:/ggzytradingservicesfeeses/" + encodeUrlPathSegment(ggzyTradingServicesFees.getId().toString(), httpServletRequest);
	}

	@RequestMapping(value = "/{id}", params = "form", produces = "text/html")
	public String GgzyTradingServicesFeesController.updateForm(@PathVariable("id") GgzyRefTenderApplyPk id, Model uiModel) {
		populateEditForm(uiModel, ggzyTradingServicesFeesService.findGgzyTradingServicesFees(id));
		return "ggzytradingservicesfeeses/update";
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
	public String GgzyTradingServicesFeesController.delete(@PathVariable("id") GgzyRefTenderApplyPk id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
		GgzyTradingServicesFees ggzyTradingServicesFees = ggzyTradingServicesFeesService.findGgzyTradingServicesFees(id);
		ggzyTradingServicesFeesService.deleteGgzyTradingServicesFees(ggzyTradingServicesFees);
		uiModel.asMap().clear();
		uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
		uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
		return "redirect:/ggzytradingservicesfeeses";
	}

	void GgzyTradingServicesFeesController.addDateTimeFormatPatterns(Model uiModel) {
		uiModel.addAttribute("ggzyTradingServicesFees_receivetime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
	}

	void GgzyTradingServicesFeesController.populateEditForm(Model uiModel, GgzyTradingServicesFees ggzyTradingServicesFees) {
		uiModel.addAttribute("ggzyTradingServicesFees", ggzyTradingServicesFees);
		addDateTimeFormatPatterns(uiModel);
	}

	String GgzyTradingServicesFeesController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
		String enc = httpServletRequest.getCharacterEncoding();
		if (enc == null) {
			enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
		}
		try {
			pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
		} catch (UnsupportedEncodingException uee) {
		}
		return pathSegment;
	}

}
