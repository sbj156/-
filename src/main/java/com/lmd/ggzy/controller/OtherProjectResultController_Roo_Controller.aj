// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.lmd.ggzy.domain.OtherProjectResult;
import com.lmd.ggzy.service.OtherProjectResultService;

privileged aspect OtherProjectResultController_Roo_Controller {
    
    @Autowired
    OtherProjectResultService OtherProjectResultController.otherProjectResultService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String OtherProjectResultController.create(@Valid OtherProjectResult otherProjectResult, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
    	AjaxObject status ;
        if (bindingResult.hasErrors()) {
           status = AjaxObject.newError(bindingResult.getFieldError().getDefaultMessage());
        }else{
        	uiModel.asMap().clear();
        	otherProjectResultService.saveOtherProjectResult(otherProjectResult);
        	status = AjaxObject.newOk(ControllerConst.ADD_SUCCESS, true);
        }
        uiModel.addAttribute(ControllerConst.STATUS, status);
        return ControllerConst.JSON_STATUS_VIEW;
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String OtherProjectResultController.createForm(Model uiModel) {
        populateEditForm(uiModel, new OtherProjectResult());
        return "otherprojectresults/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String OtherProjectResultController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("pro", otherProjectResultService.findOtherProjectResult(id));
        uiModel.addAttribute("itemId", id);
        return "otherprojectresults/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String OtherProjectResultController.list(ServletRequest request, Page page, Model uiModel) {
    	uiModel.addAttribute("list", otherProjectResultService.findByExample(DynamicSpecifications.bySearchFilter(request, OtherProjectResult.class), page));
        return "otherprojectresults/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String OtherProjectResultController.update(@Valid OtherProjectResult otherProjectResult, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
    	AjaxObject status ;
        if (bindingResult.hasErrors()) {
           status = AjaxObject.newError(bindingResult.getFieldError().getDefaultMessage());
        }else{
        	uiModel.asMap().clear();
        	otherProjectResultService.saveOtherProjectResult(otherProjectResult);
        	status = AjaxObject.newOk(ControllerConst.SAVE_SUCCESS, true);
        }
        uiModel.addAttribute(ControllerConst.STATUS, status);
        return ControllerConst.JSON_STATUS_VIEW;
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String OtherProjectResultController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, otherProjectResultService.findOtherProjectResult(id));
        return "otherprojectresults/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String OtherProjectResultController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        OtherProjectResult otherProjectResult = otherProjectResultService.findOtherProjectResult(id);
        otherProjectResultService.deleteOtherProjectResult(otherProjectResult);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/otherprojectresults";
    }
    
    void OtherProjectResultController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("otherProjectResult_bidtime_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("otherProjectResult_oldbidtime_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void OtherProjectResultController.populateEditForm(Model uiModel, OtherProjectResult otherProjectResult) {
        uiModel.addAttribute("pro", otherProjectResult);
        addDateTimeFormatPatterns(uiModel);
    }
    
    String OtherProjectResultController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
