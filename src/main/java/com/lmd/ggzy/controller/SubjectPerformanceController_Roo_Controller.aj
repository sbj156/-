// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.lmd.ggzy.controller.SubjectPerformanceController;
import com.lmd.ggzy.domain.SubjectPerformance;
import com.lmd.ggzy.service.GgzyBiddingSubjectService;
import com.lmd.ggzy.service.SubjectPerformanceService;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect SubjectPerformanceController_Roo_Controller {
    
    @Autowired
    SubjectPerformanceService SubjectPerformanceController.subjectPerformanceService;
    
    @Autowired
    GgzyBiddingSubjectService SubjectPerformanceController.ggzyBiddingSubjectService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public @ResponseBody String SubjectPerformanceController.create(@Valid SubjectPerformance subjectPerformance, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, subjectPerformance);
            return "subjectperformances/create";
        }
        uiModel.asMap().clear();
        subjectPerformanceService.saveSubjectPerformance(subjectPerformance);
        return new AjaxObject("添加成功").toString();
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String SubjectPerformanceController.createForm(Model uiModel) {
        populateEditForm(uiModel, new SubjectPerformance());
        return "subjectperformances/create";
    }
    
    @RequestMapping(value = "/{performanceId}", produces = "text/html")
    public String SubjectPerformanceController.show(@PathVariable("performanceId") String performanceId, Model uiModel) {
        uiModel.addAttribute("subjectperformance", subjectPerformanceService.findSubjectPerformance(performanceId));
        uiModel.addAttribute("itemId", performanceId);
        return "subjectperformances/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String SubjectPerformanceController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("subjectperformances", subjectPerformanceService.findSubjectPerformanceEntries(firstResult, sizeNo));
            float nrOfPages = (float) subjectPerformanceService.countAllSubjectPerformances() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("subjectperformances", subjectPerformanceService.findAllSubjectPerformances());
        }
        return "subjectperformances/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String SubjectPerformanceController.update(@Valid SubjectPerformance subjectPerformance, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, subjectPerformance);
            return "subjectperformances/update";
        }
        uiModel.asMap().clear();
        subjectPerformanceService.updateSubjectPerformance(subjectPerformance);
        return "redirect:/subjectperformances/" + encodeUrlPathSegment(subjectPerformance.getPerformanceId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{performanceId}", params = "form", produces = "text/html")
    public String SubjectPerformanceController.updateForm(@PathVariable("performanceId") String performanceId, Model uiModel) {
        populateEditForm(uiModel, subjectPerformanceService.findSubjectPerformance(performanceId));
        return "subjectperformances/update";
    }
    
    @RequestMapping(value = "/{performanceId}", method = RequestMethod.DELETE, produces = "text/html")
    public String SubjectPerformanceController.delete(@PathVariable("performanceId") String performanceId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        SubjectPerformance subjectPerformance = subjectPerformanceService.findSubjectPerformance(performanceId);
        subjectPerformanceService.deleteSubjectPerformance(subjectPerformance);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/subjectperformances";
    }
    
    void SubjectPerformanceController.populateEditForm(Model uiModel, SubjectPerformance subjectPerformance) {
        uiModel.addAttribute("subjectPerformance", subjectPerformance);
        uiModel.addAttribute("ggzybiddingsubjects", ggzyBiddingSubjectService.findAllGgzyBiddingSubjects());
    }
    
    String SubjectPerformanceController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
