// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.entity.main.User;
import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.lmd.ggzy.domain.GgzyAttachment;
import com.lmd.ggzy.service.GgzyAttachmentService;

privileged aspect GgzyAttachmentController_Roo_Controller {
    
    @Autowired
    GgzyAttachmentService GgzyAttachmentController.ggzyAttachmentService;
    
    @RequestMapping(method = RequestMethod.POST,value="/create", produces = "text/html")
    public String GgzyAttachmentController.create(@Valid GgzyAttachment ggzyAttachment, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyAttachment);
            return "ggzyattachments/create";
        }
        uiModel.asMap().clear();
        ggzyAttachmentService.saveGgzyAttachment(ggzyAttachment);
        return "redirect:/ggzyattachments/" + encodeUrlPathSegment(ggzyAttachment.getAttachmentId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyAttachmentController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyAttachment());
        return "ggzyattachments/create";
    }
    
    @RequestMapping(value = "/{attachmentId}", produces = "text/html")
    public String GgzyAttachmentController.show(@PathVariable("attachmentId") String attachmentId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzyattachment", ggzyAttachmentService.findGgzyAttachment(attachmentId));
        uiModel.addAttribute("itemId", attachmentId);
        return "ggzyattachments/show";
    }
    
    @RequestMapping(produces = "text/html")
   /* public String GgzyAttachmentController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ggzyattachments", ggzyAttachmentService.findGgzyAttachmentEntries(firstResult, sizeNo));
            float nrOfPages = (float) ggzyAttachmentService.countAllGgzyAttachments() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ggzyattachments", ggzyAttachmentService.findAllGgzyAttachments());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ggzyattachments/list";
    }*/
    public String GgzyAttachmentController.list(ServletRequest request, Page page, Model map) {
		Specification<GgzyAttachment> specification = DynamicSpecifications.bySearchFilter(request, GgzyAttachment.class);
//		List<User> users = ggzyAttachmentService.
		map.addAttribute("page", page);
		List<GgzyAttachment> attachments = ggzyAttachmentService.findByExample(specification, page);
		map.addAttribute("attachments", attachments);
		return "ggzyattachments/list";
	}
    
    @RequestMapping(method = RequestMethod.PUT,value="/update", produces = "text/html")
    public String GgzyAttachmentController.update(@Valid GgzyAttachment ggzyAttachment, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyAttachment);
            return "ggzyattachments/update";
        }
        uiModel.asMap().clear();
        ggzyAttachmentService.updateGgzyAttachment(ggzyAttachment);
        return "redirect:/ggzyattachments/" + encodeUrlPathSegment(ggzyAttachment.getAttachmentId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{attachmentId}", params = "form", produces = "text/html")
    public String GgzyAttachmentController.updateForm(@PathVariable("attachmentId") String attachmentId, Model uiModel) {
        populateEditForm(uiModel, ggzyAttachmentService.findGgzyAttachment(attachmentId));
        return "ggzyattachments/update";
    }
    
    @RequestMapping(value = "/delete/{attachmentId}")
    public String GgzyAttachmentController.delete(@PathVariable("attachmentId") String attachmentId,Model uiModel) {
    	/**
    	 * , @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, 
    	 */
    	
        GgzyAttachment ggzyAttachment = ggzyAttachmentService.findGgzyAttachment(attachmentId);
        ggzyAttachmentService.deleteGgzyAttachment(ggzyAttachment);
        uiModel.asMap().clear();
//        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
//        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzyattachments";
    }
    
    @RequestMapping(value = "/delete", method=RequestMethod.POST)
    public @ResponseBody String GgzyAttachmentController.deleteManey(@RequestParam("ids") String[] attachmentIds) {
    	for(String attachmentId : attachmentIds){
    		 GgzyAttachment ggzyAttachment = ggzyAttachmentService.findGgzyAttachment(attachmentId);
    	        ggzyAttachmentService.deleteGgzyAttachment(ggzyAttachment);
    	}
    	return AjaxObject.newOk("删除用户成功！").setCallbackType("").toString();
    }
    
    void GgzyAttachmentController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ggzyAttachment_uplodtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void GgzyAttachmentController.populateEditForm(Model uiModel, GgzyAttachment ggzyAttachment) {
        uiModel.addAttribute("ggzyAttachment", ggzyAttachment);
        addDateTimeFormatPatterns(uiModel);
    }
    
    String GgzyAttachmentController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
