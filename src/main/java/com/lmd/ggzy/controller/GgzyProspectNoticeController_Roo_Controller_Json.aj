// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.lmd.ggzy.controller.GgzyProspectNoticeController;
import com.lmd.ggzy.domain.GgzyProspectNotice;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect GgzyProspectNoticeController_Roo_Controller_Json {
    
    @RequestMapping(value = "/json/{prospectNoticeId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> GgzyProspectNoticeController.showJson(@PathVariable("prospectNoticeId") String prospectNoticeId) {
        GgzyProspectNotice ggzyProspectNotice = ggzyProspectNoticeService.findGgzyProspectNotice(prospectNoticeId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ggzyProspectNotice == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ggzyProspectNotice.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json", value="/json")
    @ResponseBody
    public ResponseEntity<String> GgzyProspectNoticeController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<GgzyProspectNotice> result = ggzyProspectNoticeService.findAllGgzyProspectNotices();
        return new ResponseEntity<String>(GgzyProspectNotice.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json", value="/json")
    public ResponseEntity<String> GgzyProspectNoticeController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        GgzyProspectNotice ggzyProspectNotice = GgzyProspectNotice.fromJsonToGgzyProspectNotice(json);
        ggzyProspectNoticeService.saveGgzyProspectNotice(ggzyProspectNotice);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+ggzyProspectNotice.getProspectNoticeId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyProspectNoticeController.createFromJsonArray(@RequestBody String json) {
        for (GgzyProspectNotice ggzyProspectNotice: GgzyProspectNotice.fromJsonArrayToGgzyProspectNotices(json)) {
            ggzyProspectNoticeService.saveGgzyProspectNotice(ggzyProspectNotice);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/json/{prospectNoticeId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyProspectNoticeController.updateFromJson(@RequestBody String json, @PathVariable("prospectNoticeId") String prospectNoticeId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        GgzyProspectNotice ggzyProspectNotice = GgzyProspectNotice.fromJsonToGgzyProspectNotice(json);
        ggzyProspectNotice.setProspectNoticeId(prospectNoticeId);
        if (ggzyProspectNoticeService.updateGgzyProspectNotice(ggzyProspectNotice) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/json/{prospectNoticeId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyProspectNoticeController.deleteFromJson(@PathVariable("prospectNoticeId") String prospectNoticeId) {
        GgzyProspectNotice ggzyProspectNotice = ggzyProspectNoticeService.findGgzyProspectNotice(prospectNoticeId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ggzyProspectNotice == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ggzyProspectNoticeService.deleteGgzyProspectNotice(ggzyProspectNotice);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
