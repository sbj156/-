// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.lmd.ggzy.controller.GgzyBiddingCandidateController;
import com.lmd.ggzy.domain.GgzyBiddingCandidate;
import com.lmd.ggzy.domain.pk.GgzyRefTenderApplyPk;

import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect GgzyBiddingCandidateController_Roo_Controller_Json {
    
    @RequestMapping(value = "/json/{biddingCandidateId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> GgzyBiddingCandidateController.showJson(@PathVariable("biddingCandidateId") GgzyRefTenderApplyPk biddingCandidateId) {
        GgzyBiddingCandidate ggzyBiddingCandidate = ggzyBiddingCandidateService.findGgzyBiddingCandidate(biddingCandidateId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ggzyBiddingCandidate == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ggzyBiddingCandidate.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json",value="/json")
    @ResponseBody
    public ResponseEntity<String> GgzyBiddingCandidateController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<GgzyBiddingCandidate> result = ggzyBiddingCandidateService.findAllGgzyBiddingCandidates();
        return new ResponseEntity<String>(GgzyBiddingCandidate.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json", value="/json")
    public ResponseEntity<String> GgzyBiddingCandidateController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        GgzyBiddingCandidate ggzyBiddingCandidate = GgzyBiddingCandidate.fromJsonToGgzyBiddingCandidate(json);
        ggzyBiddingCandidateService.saveGgzyBiddingCandidate(ggzyBiddingCandidate);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+ggzyBiddingCandidate.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyBiddingCandidateController.createFromJsonArray(@RequestBody String json) {
        for (GgzyBiddingCandidate ggzyBiddingCandidate: GgzyBiddingCandidate.fromJsonArrayToGgzyBiddingCandidates(json)) {
            ggzyBiddingCandidateService.saveGgzyBiddingCandidate(ggzyBiddingCandidate);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/json/{biddingCandidateId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyBiddingCandidateController.updateFromJson(@RequestBody String json, @PathVariable("biddingCandidateId") GgzyRefTenderApplyPk biddingCandidateId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        GgzyBiddingCandidate ggzyBiddingCandidate = GgzyBiddingCandidate.fromJsonToGgzyBiddingCandidate(json);
        if (ggzyBiddingCandidateService.updateGgzyBiddingCandidate(ggzyBiddingCandidate) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/json/{biddingCandidateId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyBiddingCandidateController.deleteFromJson(@PathVariable("biddingCandidateId") GgzyRefTenderApplyPk biddingCandidateId) {
        GgzyBiddingCandidate ggzyBiddingCandidate = ggzyBiddingCandidateService.findGgzyBiddingCandidate(biddingCandidateId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ggzyBiddingCandidate == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ggzyBiddingCandidateService.deleteGgzyBiddingCandidate(ggzyBiddingCandidate);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
