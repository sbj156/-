// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;
import java.util.Calendar;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.lmd.ggzy.domain.GgzyBiddingResNotice;
import com.lmd.ggzy.domain.GgzyNoticeTenders;
import com.lmd.ggzy.domain.GgzyTenders;
import com.lmd.ggzy.domain.pk.GgzyNoticeTendersPk;
import com.lmd.ggzy.domain.pk.GgzyRefTenderApplyPk;
import com.lmd.ggzy.service.GgzyApplyTenderService;
import com.lmd.ggzy.service.GgzyBiddingResNoticeService;
import com.lmd.ggzy.service.GgzyNoticeTendersService;
import com.lmd.ggzy.service.GgzyTendersService;

privileged aspect GgzyBiddingResNoticeController_Roo_Controller {
    
    @Autowired
    GgzyBiddingResNoticeService GgzyBiddingResNoticeController.ggzyBiddingResNoticeService;
    
    @Autowired
    GgzyApplyTenderService GgzyBiddingResNoticeController.ggzyApplyTenderService;
    
    @Autowired
	GgzyTendersService GgzyBiddingResNoticeController.tendersService;
    
    @Autowired
    GgzyNoticeTendersService GgzyBiddingResNoticeController.noticeTendersService;
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyBiddingResNoticeController.create(@Valid GgzyBiddingResNotice ggzyBiddingResNotice, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
    	AjaxObject status = null;
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyBiddingResNotice);
            status = AjaxObject.newError(bindingResult.getFieldError().getDefaultMessage());
        }else{
	        uiModel.asMap().clear();
	        ggzyBiddingResNoticeService.saveGgzyBiddingResNotice(ggzyBiddingResNotice);
	        status = AjaxObject.newOk(ControllerConst.SAVE_SUCCESS, true);
        }
        uiModel.addAttribute(ControllerConst.STATUS, status);
        return ControllerConst.JSON_STATUS_VIEW;
    }
    
    @RequestMapping(params = "tendersId", produces = "text/html")
    public String GgzyBiddingResNoticeController.createForm(Model uiModel, @RequestParam("tendersId") GgzyNoticeTendersPk tendersId) {
        populateEditForm(uiModel, new GgzyBiddingResNotice());
        GgzyNoticeTenders noticeTenders = noticeTendersService.findGgzyNoticeTenders(tendersId);
        uiModel.addAttribute("noticeTenders", noticeTenders);
        return "ggzybiddingresnotices/create";
    }
    /**
     * 保存GgzyBiddingResNotice反应比较慢
     * 添加@Transactional注解,交给Spring处理保存
     * @param uiModel
     * @param tendersId
     * @return
     */
    @RequestMapping(value = "/confirm", produces = "text/html")
    @Transactional
    public String GgzyBiddingResNoticeController.confirmPrint(Model uiModel, @RequestParam("ids") GgzyNoticeTendersPk tendersId) {
    	GgzyNoticeTenders noticeTenders = noticeTendersService.findGgzyNoticeTenders(tendersId);
    	GgzyBiddingResNotice resNotice = noticeTenders.getTenders().getBiddingResNotice();
    	AjaxObject status;
    	if(resNotice == null){
    		status = AjaxObject.newError("未打印中标通知书").setCallbackType("");
    	}else{
	    	resNotice.setPrintTime(Calendar.getInstance());
	//    	ggzyBiddingResNoticeService.saveGgzyBiddingResNotice(resNotice);
	    	status = AjaxObject.newOk(ControllerConst.SAVE_SUCCESS, true).setCallbackType("");
    	}
    	uiModel.addAttribute(ControllerConst.STATUS, status);
    	return ControllerConst.JSON_STATUS_VIEW;
    }
    
    
    @RequestMapping(value = "/{biddingResultNoticeId}", produces = "text/html")
    public String GgzyBiddingResNoticeController.show(@PathVariable("biddingResultNoticeId") GgzyRefTenderApplyPk biddingResultNoticeId, Model uiModel) {
        uiModel.addAttribute("ggzybiddingresnotice", ggzyBiddingResNoticeService.findGgzyBiddingResNotice(biddingResultNoticeId));
        uiModel.addAttribute("itemId", biddingResultNoticeId);
        return "ggzybiddingresnotices/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GgzyBiddingResNoticeController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ggzybiddingresnotices", ggzyBiddingResNoticeService.findGgzyBiddingResNoticeEntries(firstResult, sizeNo));
            float nrOfPages = (float) ggzyBiddingResNoticeService.countAllGgzyBiddingResNotices() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ggzybiddingresnotices", ggzyBiddingResNoticeService.findAllGgzyBiddingResNotices());
        }
        return "ggzybiddingresnotices/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyBiddingResNoticeController.update(@Valid GgzyBiddingResNotice ggzyBiddingResNotice, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyBiddingResNotice);
            return "ggzybiddingresnotices/update";
        }
        uiModel.asMap().clear();
        ggzyBiddingResNoticeService.updateGgzyBiddingResNotice(ggzyBiddingResNotice);
        return "redirect:/ggzybiddingresnotices/" + encodeUrlPathSegment(ggzyBiddingResNotice.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{biddingResultNoticeId}", params = "form", produces = "text/html")
    public String GgzyBiddingResNoticeController.updateForm(@PathVariable("biddingResultNoticeId") GgzyRefTenderApplyPk biddingResultNoticeId, Model uiModel) {
        populateEditForm(uiModel, ggzyBiddingResNoticeService.findGgzyBiddingResNotice(biddingResultNoticeId));
        return "ggzybiddingresnotices/update";
    }
    
    @RequestMapping(value = "/{biddingResultNoticeId}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyBiddingResNoticeController.delete(@PathVariable("biddingResultNoticeId") GgzyRefTenderApplyPk biddingResultNoticeId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyBiddingResNotice ggzyBiddingResNotice = ggzyBiddingResNoticeService.findGgzyBiddingResNotice(biddingResultNoticeId);
        ggzyBiddingResNoticeService.deleteGgzyBiddingResNotice(ggzyBiddingResNotice);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzybiddingresnotices";
    }
    
    void GgzyBiddingResNoticeController.populateEditForm(Model uiModel, GgzyBiddingResNotice ggzyBiddingResNotice) {
        uiModel.addAttribute("ggzyBiddingResNotice", ggzyBiddingResNotice);
//        uiModel.addAttribute("ggzyapplytenders", ggzyApplyTenderService.findAllGgzyApplyTenders());
    }
    
    String GgzyBiddingResNoticeController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
