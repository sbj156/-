// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.lmd.ggzy.controller.GgzyTendersController;
import com.lmd.ggzy.domain.GgzyTenders;
import com.lmd.ggzy.domain.GgzyTreeLib;

import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect GgzyTendersController_Roo_Controller_Json {
    
    @RequestMapping(value = "/json/{tendersId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> GgzyTendersController.showJson(@PathVariable("tendersId") String tendersId) {
        GgzyTenders ggzyTenders = ggzyTendersService.findGgzyTenders(tendersId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ggzyTenders == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ggzyTenders.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json", value="/json")
    @ResponseBody
    public ResponseEntity<String> GgzyTendersController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<GgzyTenders> result = ggzyTendersService.findAllGgzyTenderses();
        return new ResponseEntity<String>(GgzyTenders.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json", value="/json")
    public ResponseEntity<String> GgzyTendersController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        GgzyTenders ggzyTenders = GgzyTenders.fromJsonToGgzyTenders(json);
        ggzyTendersService.saveGgzyTenders(ggzyTenders);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+ggzyTenders.getTendersId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyTendersController.createFromJsonArray(@RequestBody String json) {
        for (GgzyTenders ggzyTenders: GgzyTenders.fromJsonArrayToGgzyTenderses(json)) {
            ggzyTendersService.saveGgzyTenders(ggzyTenders);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/json/{tendersId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyTendersController.updateFromJson(@RequestBody String json, @PathVariable("tendersId") String tendersId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        GgzyTenders ggzyTenders = GgzyTenders.fromJsonToGgzyTenders(json);
        ggzyTenders.setTendersId(tendersId);
        if (ggzyTendersService.updateGgzyTenders(ggzyTenders) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    
    @RequestMapping(value = "/scoretype/{tendersId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyTendersController.updateScoreTypes(@RequestParam("scoreTypeId") Long scoreTypeId, @PathVariable("tendersId") String tendersId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        GgzyTenders ggzyTenders = ggzyTendersService.findGgzyTenders(tendersId);
        GgzyTreeLib scoreType = ggzyTreeLibService.get(scoreTypeId);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/scoretype/{tendersId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyTendersController.deleteScoreType(@RequestParam("scoreTypeId") Long scoreTypeId, @PathVariable("tendersId") String tendersId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        GgzyTenders ggzyTenders = ggzyTendersService.findGgzyTenders(tendersId);
        
        if (ggzyTendersService.updateGgzyTenders(ggzyTenders) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/json/{tendersId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyTendersController.deleteFromJson(@PathVariable("tendersId") String tendersId) {
        GgzyTenders ggzyTenders = ggzyTendersService.findGgzyTenders(tendersId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ggzyTenders == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ggzyTendersService.deleteGgzyTenders(ggzyTenders);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
