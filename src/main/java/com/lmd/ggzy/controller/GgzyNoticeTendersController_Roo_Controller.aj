// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.lmd.ggzy.domain.GgzyNoticeTenders;
import com.lmd.ggzy.domain.pk.GgzyNoticeTendersPk;
import com.lmd.ggzy.service.GgzyNoticeTendersService;
import com.lmd.ggzy.service.GgzyTreeLibService;

privileged aspect GgzyNoticeTendersController_Roo_Controller {
    
    private ConversionService GgzyNoticeTendersController.conversionService;
    
    @Autowired
    GgzyNoticeTendersService GgzyNoticeTendersController.ggzyNoticeTendersService;
    
    @Autowired
    public GgzyNoticeTendersController.new(ConversionService conversionService) {
        super();
        this.conversionService = conversionService;
    }

    @Autowired
	GgzyTreeLibService GgzyNoticeTendersController.ggzyTreeLibService;
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyNoticeTendersController.create(@Valid GgzyNoticeTenders ggzyNoticeTenders, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyNoticeTenders);
            return "ggzynoticetenderses/create";
        }
        uiModel.asMap().clear();
        ggzyNoticeTendersService.saveGgzyNoticeTenders(ggzyNoticeTenders);
        return "redirect:/ggzynoticetenderses/" + encodeUrlPathSegment(conversionService.convert(ggzyNoticeTenders.getId(), String.class), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyNoticeTendersController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyNoticeTenders());
        return "ggzynoticetenderses/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String GgzyNoticeTendersController.show(@PathVariable("id") GgzyNoticeTendersPk id, Model uiModel) {
        uiModel.addAttribute("noticeTenders", ggzyNoticeTendersService.findGgzyNoticeTenders(id));
        uiModel.addAttribute("itemId", conversionService.convert(id, String.class));
        return "ggzynoticetenderses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GgzyNoticeTendersController.list(ServletRequest request, Page page, Model uiModel) {
        Specification<GgzyNoticeTenders> speification = DynamicSpecifications.bySearchFilter(request, GgzyNoticeTenders.class);
        if(StringUtils.isEmpty(page.getOrderField()))
        	page.setOrderField("bidTime");
    	uiModel.addAttribute("list", this.ggzyNoticeTendersService.findByExample(speification, page));
    	uiModel.addAttribute("page", page);
        return "ggzynoticetenderses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyNoticeTendersController.update(@Valid GgzyNoticeTenders ggzyNoticeTenders, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyNoticeTenders);
            return "ggzynoticetenderses/update";
        }
        uiModel.asMap().clear();
        ggzyNoticeTendersService.updateGgzyNoticeTenders(ggzyNoticeTenders);
        return "redirect:/ggzynoticetenderses/" + encodeUrlPathSegment(conversionService.convert(ggzyNoticeTenders.getId(), String.class), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String GgzyNoticeTendersController.updateForm(@PathVariable("id") GgzyNoticeTendersPk id, Model uiModel, @RequestParam(value = "scoreTypeParentId", required = false) Long scoreTypeParentId) {
    	System.out.println(id.getNoticeId() + "\t" + id.getTendersId());
		if (scoreTypeParentId != null) 
			uiModel.addAttribute("scoreTypes", ggzyTreeLibService.get(scoreTypeParentId).getChildren());
        populateEditForm(uiModel, ggzyNoticeTendersService.findGgzyNoticeTenders(id));
        return "ggzynoticetenderses/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyNoticeTendersController.delete(@PathVariable("id") GgzyNoticeTendersPk id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyNoticeTenders ggzyNoticeTenders = ggzyNoticeTendersService.findGgzyNoticeTenders(id);
        ggzyNoticeTendersService.deleteGgzyNoticeTenders(ggzyNoticeTenders);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzynoticetenderses";
    }
    
    void GgzyNoticeTendersController.populateEditForm(Model uiModel, GgzyNoticeTenders ggzyNoticeTenders) {
        uiModel.addAttribute("noticeTenders", ggzyNoticeTenders);
    }
    
    String GgzyNoticeTendersController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
