// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.lmd.ggzy.controller.GgzyBidPublicityController;
import com.lmd.ggzy.domain.GgzyAuditRes;
import com.lmd.ggzy.domain.GgzyBidPublicity;
import com.lmd.ggzy.domain.GgzyBiddingCandidate;
import com.lmd.ggzy.service.GgzyAuditResService;
import com.lmd.ggzy.service.GgzyBidPublicityService;
import com.lmd.ggzy.service.GgzyBiddingCandidateService;
import com.lmd.ggzy.service.GgzyContractService;
import com.lmd.ggzy.service.GgzyTendersService;

import java.io.UnsupportedEncodingException;
import java.util.Calendar;
import java.util.List;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect GgzyBidPublicityController_Roo_Controller {

	@Autowired
	GgzyBidPublicityService GgzyBidPublicityController.ggzyBidPublicityService;

	@Autowired
	GgzyBiddingCandidateService GgzyBidPublicityController.ggzyBiddingCandidateService;

	@Autowired
	GgzyContractService GgzyBidPublicityController.ggzyContractService;

	@Autowired
	GgzyBiddingCandidateService GgzyBidPublicityController.biddingCandidateService;

	@Autowired
	GgzyAuditResService GgzyBidPublicityController.auditResService;

	@Autowired
	GgzyTendersService GgzyBidPublicityController.tendersService;

	@RequestMapping(method = RequestMethod.POST, produces = "text/html")
	public String GgzyBidPublicityController.create(@Valid GgzyBidPublicity ggzyBidPublicity, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
		AjaxObject status = null;
		if (bindingResult.hasErrors()) {
			status = AjaxObject.newError(bindingResult.getFieldError().getDefaultMessage());
			populateEditForm(uiModel, ggzyBidPublicity);
		} else {
			uiModel.asMap().clear();
			System.out.println(ggzyBidPublicity.getNoticeTenders().getId().toJson());
			ggzyBidPublicityService.saveGgzyBidPublicity(ggzyBidPublicity);
//			biddingCandidateService.saveGgzyBiddingCandidate(ggzyBidPublicity.getTenders().getBiddingCandidates());
			status = AjaxObject.newOk(ControllerConst.SAVE_SUCCESS, true);
		}
		uiModel.addAttribute(ControllerConst.STATUS, status);
		return ControllerConst.JSON_STATUS_VIEW;
	}

	@RequestMapping(params = "form", produces = "text/html")
	public String GgzyBidPublicityController.createForm(Model uiModel, @RequestParam("tendersId") String tendersId) {
		populateEditForm(uiModel, new GgzyBidPublicity());
		uiModel.addAttribute("ggzyTenders", tendersService.findGgzyTenders(tendersId));
		return "ggzybidpublicitys/create";
	}

	@RequestMapping(value = "/audit", method = RequestMethod.PUT)
	public String GgzyBidPublicityController.audit(@Valid GgzyBidPublicity ggzyBidPublicity, @Valid GgzyAuditRes auditRes, Model uiModel, BindingResult bindingResult) {
		AjaxObject status;
		if (bindingResult.hasErrors()) {
			status = AjaxObject.newError(bindingResult.getFieldError().toString());
		} else {
			uiModel.asMap().clear();
			if (auditRes.getPass() != null) {
				auditRes.setAuditTabPk(ggzyBidPublicity.getBidPublicityId());
				ggzyBidPublicity.setAuditTime(Calendar.getInstance());
				ggzyBidPublicity.setAuditStatus((auditRes.getPass() != null && auditRes.getPass()) ? 2 : 1);
				auditRes.setType(1);
				auditResService.saveGgzyAuditRes(auditRes);
				ggzyBidPublicityService.saveGgzyBidPublicity(ggzyBidPublicity);
				status = AjaxObject.newOk(ControllerConst.AUDIT_SUCCESS, true);
			} else {
				status = AjaxObject.newError(ControllerConst.AUDIT_FAIL, true);
			}
		}
		uiModel.addAttribute(ControllerConst.STATUS, status);
		return ControllerConst.JSON_STATUS_VIEW;
	}

	@RequestMapping(value = "/{bidPublicityId}", produces = "text/html")
	public String GgzyBidPublicityController.show(@PathVariable("bidPublicityId") String bidPublicityId, Model uiModel) {
		populateEditForm(uiModel, ggzyBidPublicityService.findGgzyBidPublicity(bidPublicityId));
		return "ggzybidpublicitys/show";
	}

	@RequestMapping(produces = "text/html")
	public String GgzyBidPublicityController.list(ServletRequest request, Page page, Model uiModel) {
		Specification<GgzyBidPublicity> specification = DynamicSpecifications.bySearchFilter(request, GgzyBidPublicity.class);
		List<GgzyBidPublicity> list = ggzyBidPublicityService.findByExample(specification, page);
		uiModel.addAttribute("page", page);
		uiModel.addAttribute("list", list);
		return "ggzybidpublicitys/list";
	}

	@RequestMapping(method = RequestMethod.PUT, produces = "text/html")
	public String GgzyBidPublicityController.update(@Valid GgzyBidPublicity ggzyBidPublicity, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
		AjaxObject status;
		if (bindingResult.hasErrors()) {
			status = AjaxObject.newError(bindingResult.getFieldError().toString());
		} else {
			uiModel.asMap().clear();
			ggzyBidPublicityService.saveGgzyBidPublicity(ggzyBidPublicity);
//			biddingCandidateService.saveGgzyBiddingCandidate(ggzyBidPublicity.getTenders().getBiddingCandidates());
			status = AjaxObject.newOk(ControllerConst.SAVE_SUCCESS, true);
		}
		uiModel.addAttribute(ControllerConst.STATUS, status);
		return ControllerConst.JSON_STATUS_VIEW;
	}

	@RequestMapping(value = "/{bidPublicityId}", params = "form", produces = "text/html")
	public String GgzyBidPublicityController.updateForm(@PathVariable("bidPublicityId") String bidPublicityId, Model uiModel) {
		populateEditForm(uiModel, ggzyBidPublicityService.findGgzyBidPublicity(bidPublicityId));
		return "ggzybidpublicitys/update";
	}

	@RequestMapping(value = "/{bidPublicityId}", method = RequestMethod.DELETE, produces = "text/html")
	public String GgzyBidPublicityController.delete(@PathVariable("bidPublicityId") String bidPublicityId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
		GgzyBidPublicity ggzyBidPublicity = ggzyBidPublicityService.findGgzyBidPublicity(bidPublicityId);
		ggzyBidPublicityService.deleteGgzyBidPublicity(ggzyBidPublicity);
		uiModel.asMap().clear();
		uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
		uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
		return "redirect:/ggzybidpublicitys";
	}

	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public String GgzyBidPublicityController.deleteManey(@RequestParam("ids") String[] ids, Model uiModel) {
		for (String id : ids) {
			GgzyBidPublicity ggzyBidPublicity = ggzyBidPublicityService.findGgzyBidPublicity(id);
			ggzyBidPublicityService.deleteGgzyBidPublicity(ggzyBidPublicity);
		}
		AjaxObject status = AjaxObject.newOk(ControllerConst.DELETE_SUCCESS, true);
		uiModel.addAttribute(ControllerConst.STATUS, status);
		return ControllerConst.JSON_STATUS_VIEW;
	}

	void GgzyBidPublicityController.addDateTimeFormatPatterns(Model uiModel) {
		uiModel.addAttribute("ggzyBidPublicity_publicitybegintime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
		uiModel.addAttribute("ggzyBidPublicity_publicityendtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
		uiModel.addAttribute("ggzyBidPublicity_subtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
	}

	void GgzyBidPublicityController.populateEditForm(Model uiModel, GgzyBidPublicity ggzyBidPublicity) {
		uiModel.addAttribute("ggzyBidPublicity", ggzyBidPublicity);
		if (ggzyBidPublicity != null && ggzyBidPublicity.getBidPublicityId() != null)
			uiModel.addAttribute("auditReses", auditResService.findByTablePk(ggzyBidPublicity.getBidPublicityId()));
		addDateTimeFormatPatterns(uiModel);
	}

	String GgzyBidPublicityController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
		String enc = httpServletRequest.getCharacterEncoding();
		if (enc == null) {
			enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
		}
		try {
			pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
		} catch (UnsupportedEncodingException uee) {
		}
		return pathSegment;
	}

}
