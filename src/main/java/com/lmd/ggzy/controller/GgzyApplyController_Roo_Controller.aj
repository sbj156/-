// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import net.sf.excelutils.ExcelException;

import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.ketayao.ketacustom.util.persistence.SearchFilter.Operator;
import com.lmd.ggzy.domain.GgzyApply;
import com.lmd.ggzy.domain.GgzyBidPro;
import com.lmd.ggzy.domain.GgzyComboCompany;
import com.lmd.ggzy.service.GgzyApplyService;
import com.lmd.ggzy.service.GgzyApplyTenderService;
import com.lmd.ggzy.service.GgzyBidProService;
import com.lmd.ggzy.service.GgzyBiddingSubjectService;
import com.lmd.ggzy.service.GgzyNoticeService;
import com.lmd.util.ExcelUtil;

privileged aspect GgzyApplyController_Roo_Controller {
	private static final String GgzyApplyController.APPLY_SUCCESS = "apply_success"; 
    
    @Autowired
    GgzyApplyService GgzyApplyController.ggzyApplyService;
    @Autowired
    GgzyApplyTenderService GgzyApplyController.ggzyApplyTenderService;
    
    @Autowired
    GgzyBidProService GgzyApplyController.ggzyBidProService;
    
    @Autowired
    GgzyBiddingSubjectService GgzyApplyController.ggzyBiddingSubjectService;
    
    @Autowired
    GgzyNoticeService GgzyApplyController.ggzyNoticeService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String GgzyApplyController.create(@Valid GgzyApply ggzyApply, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
    	AjaxObject status = null;
        if (bindingResult.hasErrors()) {
        	status = AjaxObject.newError(bindingResult.getFieldError().getDefaultMessage());
        }else{
        	uiModel.asMap().clear();
        	Specification<GgzyApply> specification = DynamicSpecifications.buildspecification(GgzyApply.class,
        			new String[]{"notice.noticeId", "biddingSubject.biddingSubjectId"},
        			new Operator[]{Operator.EQ, Operator.EQ}, 
        			new String[]{ggzyApply.getNotice().getNoticeId(),
        		ggzyApply.getBiddingSubject().getBiddingSubjectId()});
        	List<GgzyApply> applys = ggzyApplyService.findByExample(specification, new Page());
        	if(applys.size() > 0){
        		ggzyApply.setApplyId(applys.get(0).getApplyId());
        	}
        	if(ggzyApply.getComboCompany()!=null){
        		for (GgzyComboCompany combo : ggzyApply.getComboCompany()) {
    				combo.setApply(ggzyApply);
    			}
        	}
        	
            ggzyApplyService.saveGgzyApply(ggzyApply);
	        status = AjaxObject.newOk(APPLY_SUCCESS, true);
        }
        uiModel.addAttribute(ControllerConst.STATUS, status);
        return ControllerConst.JSON_STATUS_VIEW;
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyApplyController.createForm(Model uiModel, @RequestParam(value="noticeId") String noticeId) {
    	uiModel.addAttribute("ggzyNotice", ggzyNoticeService.findGgzyNotice(noticeId));
        populateEditForm(uiModel, new GgzyApply());
        return "ggzyapplys/create";
    }
    
    @RequestMapping(value = "/{applyId}", produces = "text/html")
    public String GgzyApplyController.show(@PathVariable("applyId") String applyId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzyApply", ggzyApplyService.findGgzyApply(applyId));
        uiModel.addAttribute("itemId", applyId);
        return "ggzyapplys/show";
    }
    
    @RequestMapping()
    public String GgzyApplyController.list(ServletRequest request, Page page, Model map) {
    	Specification<GgzyApply> specification = DynamicSpecifications
				.bySearchFilter(request, GgzyApply.class);
		map.addAttribute("page", page);
		List<GgzyApply> list = ggzyApplyService.findByExample(
				specification, page);
		map.addAttribute("list", list);
        return "ggzyapplys/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyApplyController.update(@Valid GgzyApply ggzyApply, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyApply);
            return "ggzyapplys/update";
        }
        uiModel.asMap().clear();
        ggzyApplyService.updateGgzyApply(ggzyApply);
        return "redirect:/ggzyapplys/" + encodeUrlPathSegment(ggzyApply.getApplyId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{applyId}", params = "form", produces = "text/html")
    public String GgzyApplyController.updateForm(@PathVariable("applyId") String applyId, Model uiModel) {
        populateEditForm(uiModel, ggzyApplyService.findGgzyApply(applyId));
        return "ggzyapplys/update";
    }
    
    @RequestMapping(value = "/{applyId}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyApplyController.delete(@PathVariable("applyId") String applyId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyApply ggzyApply = ggzyApplyService.findGgzyApply(applyId);
        ggzyApplyService.deleteGgzyApply(ggzyApply);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzyapplys";
    }
    
    @RequestMapping(value = "/delete")
	public @ResponseBody String GgzyApplyController.deleteManey(@RequestParam("ids") String[] ids) {
    	for(String id : ids){
    		GgzyApply ggzyApply = ggzyApplyService.findGgzyApply(id);
    		ggzyApplyService.deleteGgzyApply(ggzyApply);
    	}
    	return AjaxObject.newOk("删除成功！").setCallbackType("").toString();
    }
    
    void GgzyApplyController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ggzyApply_applytime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ggzyApply_signtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void GgzyApplyController.populateEditForm(Model uiModel, GgzyApply ggzyApply) {
        uiModel.addAttribute("ggzyApply", ggzyApply);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzyapplytenders", ggzyApplyTenderService.findAllGgzyApplyTenders());
        uiModel.addAttribute("ggzybidproes", ggzyBidProService.findAllGgzyBidProes());
        uiModel.addAttribute("ggzybiddingsubjects", ggzyBiddingSubjectService.findAllGgzyBiddingSubjects());
    }
    
    String GgzyApplyController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
   
	/**
	 * 导出报名详细列表excel id为noticeid
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/exportExcel/{id}")
	public void GgzyApplyController.exportExcel(HttpServletRequest request,
			HttpServletResponse response, @PathVariable("id") String id) {
		// time转字符串
		SimpleDateFormat dateTimeformat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss");
		// 创建excelUtil对象调用工具类里导出excel表格方法
		ExcelUtil excelUtil = new ExcelUtil();
		// 创建map保存放入excel表格的数据
		Map<String, Object> map = new HashMap<String, Object>();
		// 获得招标详细的列表信息
		List ggzyApplyList = new ArrayList();
		// 通过noticeId获取GgzyBidPro
		GgzyBidPro ggzyBidPro = ggzyNoticeService.findGgzyNotice(id)
				.getBidPro();
		// 公共资源交易编号放入到map中
		String proCode = ggzyBidPro.getProCode();
		map.put("proCode", proCode);
		map.put("bidProName", ggzyBidPro.getBidProName());
		map.put("majorName", ggzyBidPro.getMajorType().getName());
		map.put("bidPerson", ggzyBidPro.getTenderee().getSubjectName());
		map.put("agencyName", ggzyBidPro.getAgency().getSubjectName());
		map.put("agencyContact", ggzyBidPro.getAgencyContacts());
		// 报名时间开始
		Calendar startTime = ggzyNoticeService.findGgzyNotice(id)
				.getTendererDocGainTime();
		String startTimeStr = dateTimeformat.format(startTime.getTime());
		map.put("startTimeStr", startTimeStr);
		// 报名截止时间
		Calendar endTime = ggzyNoticeService.findGgzyNotice(id)
				.getTendererDocGainEndTime();
		String endTimeStr = dateTimeformat.format(endTime.getTime());
		map.put("endTimeStr", endTimeStr);
		// 办理人员暂无
		// excel表格输出时间
		Date currentTime = new Date();
		SimpleDateFormat dateformat = new SimpleDateFormat("yyyy年MM月dd日");
		String currentTimeStr = dateformat.format(currentTime);
		map.put("currentTimeStr", currentTimeStr);
		// 获取GgzyApply的set集合
		Set<GgzyApply> ggzyApplySet = ggzyNoticeService.findGgzyNotice(id)
				.getGgzyApplies();
		// 将set转化成list
		List<GgzyApply> list = new ArrayList<GgzyApply>(ggzyApplySet);
		// 重组ggzyApplyList(将list的值放入newdataMap中再放入ggzyApplyList)
		for (int i = 0; i < list.size(); i++) {
			GgzyApply ggzyApply = list.get(i);
			Map<String, Object> newdataMap = new HashMap<String, Object>();// 创建新的map
			String subjectName = ggzyApply.getBiddingSubject().getSubjectName();
			Calendar applyTime = ggzyApply.getApplyTime();
			String applyTimeStr = dateTimeformat.format(applyTime.getTime());
			newdataMap.put("number", i + 1);
			newdataMap.put("subjectName", subjectName);
			newdataMap.put("applyTime", applyTimeStr);
			ggzyApplyList.add(newdataMap);
		}
		map.put("ggzyApplyList", ggzyApplyList);
		// 获取企业总数量(共多少家投标企业)放入map
		map.put("totalQuantity", ggzyApplyList.size());
		try {
			excelUtil.exportExcel(response, "applyDetails.xls", map, proCode
					+ "报名表");
		} catch (ExcelException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
