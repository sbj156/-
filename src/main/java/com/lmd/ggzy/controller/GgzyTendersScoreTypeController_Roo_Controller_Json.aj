// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.lmd.ggzy.domain.GgzyTendersScoreType;
import com.lmd.ggzy.domain.pk.GgzyTendersScoreTypePk;
import com.lmd.ggzy.service.GgzyTendersScoreTypeService;

privileged aspect GgzyTendersScoreTypeController_Roo_Controller_Json {
    
    @RequestMapping(value = "/json/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> GgzyTendersScoreTypeController.showJson(@PathVariable("id") GgzyTendersScoreTypePk id) {
        GgzyTendersScoreType GgzyTendersScoreType = ggzyTendersScoreTypeService.findGgzyTendersScoreType(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (GgzyTendersScoreType == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(GgzyTendersScoreType.toJson(), headers, HttpStatus.OK);
    }
    @RequestMapping(headers = "Accept=application/json", value="/json")
    @ResponseBody
    public ResponseEntity<String> GgzyTendersScoreTypeController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<GgzyTendersScoreType> result = ggzyTendersScoreTypeService.findAllGgzyTendersScoreTypes();
        return new ResponseEntity<String>(GgzyTendersScoreType.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json", value="/json")
    public ResponseEntity<String> GgzyTendersScoreTypeController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        GgzyTendersScoreType ggzyTendersScoreType = GgzyTendersScoreType.fromJsonToGgzyTendersScoreType(json);
        ggzyTendersScoreTypeService.saveGgzyTendersScoreType(ggzyTendersScoreType);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
//        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+ggzyTendersScoreType.getProspectRecordId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyTendersScoreTypeController.createFromJsonArray(@RequestBody String json) {
        for (GgzyTendersScoreType ggzyTendersScoreType: GgzyTendersScoreType.fromJsonArrayToGgzyTendersScoreTypes(json)) {
            ggzyTendersScoreTypeService.saveGgzyTendersScoreType(ggzyTendersScoreType);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyTendersScoreTypeController.updateFromJson(@RequestBody String json, @PathVariable("id") GgzyTendersScoreTypePk id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        GgzyTendersScoreType ggzyTendersScoreType = GgzyTendersScoreType.fromJsonToGgzyTendersScoreType(json);
        ggzyTendersScoreType.setId(id);
        if (ggzyTendersScoreTypeService.updateGgzyTendersScoreType(ggzyTendersScoreType) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/delete/{id}", headers = "Accept=application/json")
    public ResponseEntity<String> GgzyTendersScoreTypeController.deleteFromJson(@PathVariable("id") GgzyTendersScoreTypePk id) {
        GgzyTendersScoreType GgzyTendersScoreType = ggzyTendersScoreTypeService.findGgzyTendersScoreType(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (GgzyTendersScoreType == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ggzyTendersScoreTypeService.deleteGgzyTendersScoreType(GgzyTendersScoreType);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
