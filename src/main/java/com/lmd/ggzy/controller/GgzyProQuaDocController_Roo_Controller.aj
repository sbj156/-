// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.lmd.ggzy.controller.GgzyProQuaDocController;
import com.lmd.ggzy.domain.GgzyProQuaDoc;
import com.lmd.ggzy.service.GgzyProQuaDocService;
import com.lmd.ggzy.service.GgzyTendersService;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect GgzyProQuaDocController_Roo_Controller {
    
    @Autowired
    GgzyProQuaDocService GgzyProQuaDocController.ggzyProQuaDocService;
    
    @Autowired
    GgzyTendersService GgzyProQuaDocController.ggzyTendersService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyProQuaDocController.create(@Valid GgzyProQuaDoc ggzyProQuaDoc, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyProQuaDoc);
            return "ggzyproquadocs/create";
        }
        uiModel.asMap().clear();
        ggzyProQuaDocService.saveGgzyProQuaDoc(ggzyProQuaDoc);
        return "redirect:/ggzyproquadocs/" + encodeUrlPathSegment(ggzyProQuaDoc.getProQuaDocId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyProQuaDocController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyProQuaDoc());
        return "ggzyproquadocs/create";
    }
    
    @RequestMapping(value = "/{proQuaDocId}", produces = "text/html")
    public String GgzyProQuaDocController.show(@PathVariable("proQuaDocId") String proQuaDocId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzyproquadoc", ggzyProQuaDocService.findGgzyProQuaDoc(proQuaDocId));
        uiModel.addAttribute("itemId", proQuaDocId);
        return "ggzyproquadocs/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GgzyProQuaDocController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ggzyproquadocs", ggzyProQuaDocService.findGgzyProQuaDocEntries(firstResult, sizeNo));
            float nrOfPages = (float) ggzyProQuaDocService.countAllGgzyProQuaDocs() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ggzyproquadocs", ggzyProQuaDocService.findAllGgzyProQuaDocs());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ggzyproquadocs/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyProQuaDocController.update(@Valid GgzyProQuaDoc ggzyProQuaDoc, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyProQuaDoc);
            return "ggzyproquadocs/update";
        }
        uiModel.asMap().clear();
        ggzyProQuaDocService.updateGgzyProQuaDoc(ggzyProQuaDoc);
        return "redirect:/ggzyproquadocs/" + encodeUrlPathSegment(ggzyProQuaDoc.getProQuaDocId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{proQuaDocId}", params = "form", produces = "text/html")
    public String GgzyProQuaDocController.updateForm(@PathVariable("proQuaDocId") String proQuaDocId, Model uiModel) {
        populateEditForm(uiModel, ggzyProQuaDocService.findGgzyProQuaDoc(proQuaDocId));
        return "ggzyproquadocs/update";
    }
    
    @RequestMapping(value = "/{proQuaDocId}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyProQuaDocController.delete(@PathVariable("proQuaDocId") String proQuaDocId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyProQuaDoc ggzyProQuaDoc = ggzyProQuaDocService.findGgzyProQuaDoc(proQuaDocId);
        ggzyProQuaDocService.deleteGgzyProQuaDoc(ggzyProQuaDoc);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzyproquadocs";
    }
    
    void GgzyProQuaDocController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ggzyProQuaDoc_applydocdeliveryendtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ggzyProQuaDoc_applydocopentime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ggzyProQuaDoc_subtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void GgzyProQuaDocController.populateEditForm(Model uiModel, GgzyProQuaDoc ggzyProQuaDoc) {
        uiModel.addAttribute("ggzyProQuaDoc", ggzyProQuaDoc);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzytenderses", ggzyTendersService.findAllGgzyTenderses());
    }
    
    String GgzyProQuaDocController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
