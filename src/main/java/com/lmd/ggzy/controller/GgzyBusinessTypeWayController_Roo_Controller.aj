// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.lmd.ggzy.domain.GgzyBusinessTypeWay;
import com.lmd.ggzy.domain.pk.GgzyBusinessTypeWayPK;
import com.lmd.ggzy.service.GgzyBusinessTypeService;
import com.lmd.ggzy.service.GgzyBusinessTypeWayService;
import com.lmd.ggzy.service.GgzyBusinessWayService;

privileged aspect GgzyBusinessTypeWayController_Roo_Controller {
    
    private ConversionService GgzyBusinessTypeWayController.conversionService;
    
    @Autowired
    GgzyBusinessTypeWayService GgzyBusinessTypeWayController.ggzyBusinessTypeWayService;
    
    @Autowired
    GgzyBusinessTypeService GgzyBusinessTypeWayController.ggzyBusinessTypeService;
    
    @Autowired
    GgzyBusinessWayService GgzyBusinessTypeWayController.ggzyBusinessWayService;
    
    @Autowired
    public GgzyBusinessTypeWayController.new(ConversionService conversionService) {
        super();
        this.conversionService = conversionService;
    }

    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyBusinessTypeWayController.create(@Valid GgzyBusinessTypeWay ggzyBusinessTypeWay, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyBusinessTypeWay);
            return "ggzybusinesstypeways/create";
        }
        uiModel.asMap().clear();
        ggzyBusinessTypeWayService.saveGgzyBusinessTypeWay(ggzyBusinessTypeWay);
        return "redirect:/ggzybusinesstypeways/" + encodeUrlPathSegment(conversionService.convert(ggzyBusinessTypeWay.getId(), String.class), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyBusinessTypeWayController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyBusinessTypeWay());
        return "ggzybusinesstypeways/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String GgzyBusinessTypeWayController.show(@PathVariable("id") GgzyBusinessTypeWayPK id, Model uiModel) {
        uiModel.addAttribute("ggzybusinesstypeway", ggzyBusinessTypeWayService.findGgzyBusinessTypeWay(id));
        uiModel.addAttribute("itemId", conversionService.convert(id, String.class));
        return "ggzybusinesstypeways/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GgzyBusinessTypeWayController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ggzybusinesstypeways", ggzyBusinessTypeWayService.findGgzyBusinessTypeWayEntries(firstResult, sizeNo));
            float nrOfPages = (float) ggzyBusinessTypeWayService.countAllGgzyBusinessTypeWays() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ggzybusinesstypeways", ggzyBusinessTypeWayService.findAllGgzyBusinessTypeWays());
        }
        return "ggzybusinesstypeways/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyBusinessTypeWayController.update(@Valid GgzyBusinessTypeWay ggzyBusinessTypeWay, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyBusinessTypeWay);
            return "ggzybusinesstypeways/update";
        }
        uiModel.asMap().clear();
        ggzyBusinessTypeWayService.updateGgzyBusinessTypeWay(ggzyBusinessTypeWay);
        return "redirect:/ggzybusinesstypeways/" + encodeUrlPathSegment(conversionService.convert(ggzyBusinessTypeWay.getId(), String.class), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String GgzyBusinessTypeWayController.updateForm(@PathVariable("id") GgzyBusinessTypeWayPK id, Model uiModel) {
        populateEditForm(uiModel, ggzyBusinessTypeWayService.findGgzyBusinessTypeWay(id));
        return "ggzybusinesstypeways/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyBusinessTypeWayController.delete(@PathVariable("id") GgzyBusinessTypeWayPK id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyBusinessTypeWay ggzyBusinessTypeWay = ggzyBusinessTypeWayService.findGgzyBusinessTypeWay(id);
        ggzyBusinessTypeWayService.deleteGgzyBusinessTypeWay(ggzyBusinessTypeWay);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzybusinesstypeways";
    }
    
    void GgzyBusinessTypeWayController.populateEditForm(Model uiModel, GgzyBusinessTypeWay ggzyBusinessTypeWay) {
        uiModel.addAttribute("ggzyBusinessTypeWay", ggzyBusinessTypeWay);
        uiModel.addAttribute("ggzybusinesstypes", ggzyBusinessTypeService.findAllGgzyBusinessTypes());
        uiModel.addAttribute("ggzybusinessways", ggzyBusinessWayService.findAllGgzyBusinessWays());
    }
    
    String GgzyBusinessTypeWayController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
