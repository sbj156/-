// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

import com.lmd.ggzy.domain.GgzyBidPro;

privileged aspect GgzyBidProController_Roo_Controller_Json {
    
    @RequestMapping(value = "/json/{bidProId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> GgzyBidProController.showJson(@PathVariable("bidProId") String bidProId) {
        GgzyBidPro ggzyBidPro = ggzyBidProService.findGgzyBidPro(bidProId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ggzyBidPro == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ggzyBidPro.toJson(), headers, HttpStatus.OK);
    }
    
   @RequestMapping(headers = "Accept=application/json", value="/json")
    @ResponseBody
    public ResponseEntity<String> GgzyBidProController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<GgzyBidPro> result = ggzyBidProService.findAllGgzyBidProes();
        return new ResponseEntity<String>(GgzyBidPro.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json", value="/json")
    public ResponseEntity<String> GgzyBidProController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        GgzyBidPro ggzyBidPro = GgzyBidPro.fromJsonToGgzyBidPro(json);
        ggzyBidProService.saveGgzyBidPro(ggzyBidPro);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+ggzyBidPro.getBidProId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyBidProController.createFromJsonArray(@RequestBody String json) {
        for (GgzyBidPro ggzyBidPro: GgzyBidPro.fromJsonArrayToGgzyBidProes(json)) {
            ggzyBidProService.saveGgzyBidPro(ggzyBidPro);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/json/{bidProId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyBidProController.updateFromJson(@RequestBody String json, @PathVariable("bidProId") String bidProId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        GgzyBidPro ggzyBidPro = GgzyBidPro.fromJsonToGgzyBidPro(json);
        ggzyBidPro.setBidProId(bidProId);
        if (ggzyBidProService.updateGgzyBidPro(ggzyBidPro) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/json/{bidProId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> GgzyBidProController.deleteFromJson(@PathVariable("bidProId") String bidProId) {
        GgzyBidPro ggzyBidPro = ggzyBidProService.findGgzyBidPro(bidProId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ggzyBidPro == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ggzyBidProService.deleteGgzyBidPro(ggzyBidPro);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
