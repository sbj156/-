// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;
import java.util.Calendar;
import java.util.List;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.lmd.ggzy.domain.GgzyAuditRes;
import com.lmd.ggzy.domain.GgzyNotice;
import com.lmd.ggzy.service.GgzyAuditResService;
import com.lmd.ggzy.service.GgzyBidProService;
import com.lmd.ggzy.service.GgzyNoticeService;
import com.lmd.ggzy.service.GgzyNoticeTendersService;
import com.lmd.ggzy.service.GgzyTendersService;
import com.lmd.spring.task.SyncNoticeTask;



privileged aspect GgzyNoticeController_Roo_Controller {
	
	@Autowired
	private GgzyAuditResService GgzyNoticeController.auditResService;
	
    @Autowired
    GgzyNoticeService GgzyNoticeController.ggzyNoticeService;
    
    @Autowired
    GgzyBidProService GgzyNoticeController.ggzyBidProService;
    
    @Autowired
    GgzyTendersService GgzyNoticeController.ggzyTendersService;
    
    @Autowired
    GgzyNoticeTendersService GgzyNoticeController.noticeTendersService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyNoticeController.create(@Valid GgzyNotice ggzyNotice,@RequestParam(value = "tendersId", required = false) String[] tendersIds, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
    	AjaxObject status = null;
        if (bindingResult.hasErrors()) {
        	status = AjaxObject.newError(bindingResult.getFieldError().getDefaultMessage());
        }else{
	        uiModel.asMap().clear();
	        ggzyNoticeService.makeNotice(ggzyNotice, tendersIds);
	        status = AjaxObject.newOk(ControllerConst.ADD_SUCCESS, true);
        }
        uiModel.addAttribute(ControllerConst.STATUS, status);
        return ControllerConst.JSON_STATUS_VIEW;
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyNoticeController.createForm(Model uiModel, @RequestParam(value="bidProId", required=true)String bidProId) {
        populateEditForm(uiModel, new GgzyNotice());
        uiModel.addAttribute("ggzyBidPro", ggzyBidProService.findGgzyBidPro(bidProId));
        return "ggzynotices/create";
    }
    
    @RequestMapping(value = "/{noticeId}", produces = "text/html")
    public String GgzyNoticeController.show(@PathVariable("noticeId") String noticeId, Model uiModel) {
        populateEditForm(uiModel, ggzyNoticeService.findGgzyNotice(noticeId));
        return "ggzynotices/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GgzyNoticeController.list(ServletRequest request, Page page, Model map, @RequestParam(required=false, value="nv_") String nv_) {
    	Specification<GgzyNotice> specification = DynamicSpecifications
				.bySearchFilter(request, GgzyNotice.class);
		map.addAttribute("page", page);
		List<GgzyNotice> list = ggzyNoticeService.findByExample(
				specification, page);
		map.addAttribute("list", list);
        addDateTimeFormatPatterns(map);
        if(!StringUtils.isEmpty(nv_))
			return nv_;
        return "ggzynotices/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String GgzyNoticeController.update(@Valid GgzyNotice ggzyNotice,@Valid GgzyAuditRes auditRes, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest, @RequestParam(value = "tendersId", required = false) String[] tendersIds) {
    	AjaxObject status = null;
        if (bindingResult.hasErrors()) {
        	status = AjaxObject.newError(bindingResult.getFieldErrors().toString());
        }else{
	        uiModel.asMap().clear();
	        /**
	         * auditRes.getPass() 不为空说明 是审核操作
	         */
	        if(auditRes.getPass() != null){
	        	auditRes.setAuditTabPk(ggzyNotice.getNoticeId());
	        	ggzyNotice.setAuditTime(Calendar.getInstance());
	        	ggzyNotice.setAuditStatus((auditRes.getPass() != null&& auditRes.getPass())? 2:1);
	        	auditRes.setType(1);
	        	this.auditResService.saveGgzyAuditRes(auditRes);
	        	status = AjaxObject.newOk(ControllerConst.AUDIT_SUCCESS, true);
	        	ggzyNoticeService.updateGgzyNotice(ggzyNotice);
	        	if(ggzyNotice.getAuditStatus() == 2){
//	        		syncNoticeTask.syncNotice(ggzyNotice.getNoticeId());
	        	}
	        }else{
	        	ggzyNotice.setMakeTime(Calendar.getInstance());
	        	ggzyNoticeService.makeNotice(ggzyNotice, tendersIds);
	        	status = AjaxObject.newOk(ControllerConst.UPDATE_SUCCESS, true);
	        }
        }
        uiModel.addAttribute(ControllerConst.STATUS, status);
        return ControllerConst.JSON_STATUS_VIEW;
    }
    
    @RequestMapping(value = "/{noticeId}", params = "form", produces = "text/html")
    public String GgzyNoticeController.updateForm(@PathVariable("noticeId") String noticeId, Model uiModel) {
        populateEditForm(uiModel, ggzyNoticeService.findGgzyNotice(noticeId));
        return "ggzynotices/update";
    }
    
    @RequestMapping(value = "/{noticeId}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyNoticeController.delete(@PathVariable("noticeId") String noticeId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyNotice ggzyNotice = ggzyNoticeService.findGgzyNotice(noticeId);
        ggzyNoticeService.deleteGgzyNotice(ggzyNotice);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzynotices";
    }
    
	@RequestMapping(value = "/delete", method=RequestMethod.POST)
	public @ResponseBody String GgzyNoticeController.deleteMany(@RequestParam("ids") String[] ids) {
    	for(String id : ids){
    		GgzyNotice ggzyNotice = ggzyNoticeService.findGgzyNotice(id);
    		ggzyNoticeService.deleteGgzyNotice(ggzyNotice);
    	}
    	return AjaxObject.newOk("删除成功！").setCallbackType("").toString();
    }
    
    void GgzyNoticeController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ggzyNotice_tendererdocgaintime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ggzyNotice_biddocsubendtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ggzyNotice_pubtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ggzyNotice_noticeendtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void GgzyNoticeController.populateEditForm(Model uiModel, GgzyNotice ggzyNotice) {
        uiModel.addAttribute("ggzyNotice", ggzyNotice);
        if(ggzyNotice != null && ggzyNotice.getNoticeId() != null)
        	uiModel.addAttribute("auditReses", auditResService.findByTablePk(ggzyNotice.getNoticeId()));
        
        addDateTimeFormatPatterns(uiModel);
        
//        uiModel.addAttribute("ggzybidproes", ggzyBidProService.findAllGgzyBidProes());
    }
    
    String GgzyNoticeController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
