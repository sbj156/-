// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;
import java.util.List;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.lmd.ggzy.domain.GgzyBasePro;
import com.lmd.ggzy.service.GgzyBaseProService;
import com.lmd.ggzy.service.GgzyBidProService;
import com.lmd.ggzy.service.GgzyBusinessTypeService;

privileged aspect GgzyBaseProController_Roo_Controller {

	@Autowired
	GgzyBaseProService GgzyBaseProController.ggzyBaseProService;

	@Autowired
	GgzyBidProService GgzyBaseProController.ggzyBidProService;
	
	@Autowired
	GgzyBusinessTypeService GgzyBaseProController.businessTypeService;
	
	@RequestMapping(method = RequestMethod.POST, value = "/create", produces = "text/html")
	public String GgzyBaseProController.create(@Valid GgzyBasePro ggzyBasePro,
			BindingResult bindingResult, Model uiModel,
			HttpServletRequest httpServletRequest) {
		if (bindingResult.hasErrors()) {
			populateEditForm(uiModel, ggzyBasePro);
			return "ggzybaseproes/create";
		}
		uiModel.asMap().clear();
		ggzyBaseProService.saveGgzyBasePro(ggzyBasePro);
		return "redirect:/ggzybaseproes/"
				+ encodeUrlPathSegment(ggzyBasePro.getBaseProId().toString(),
						httpServletRequest);
	}

	@RequestMapping(params = "form", produces = "text/html")
	public String GgzyBaseProController.createForm(Model uiModel, @RequestParam("business_type") String business_type) {
		populateEditForm(uiModel, new GgzyBasePro());
		uiModel.addAttribute("majorTypes", businessTypeService.findGgzyBusinessType(business_type).getGgzyBusinessTypeMajors());
		uiModel.addAttribute("businessWays", businessTypeService.findGgzyBusinessType(business_type).getGgzyBusinessTypeWays());
		return "ggzybaseproes/create";
	}

	@RequestMapping(value = "/{baseProId}", method=RequestMethod.GET)
	public String GgzyBaseProController.show(
			@PathVariable("baseProId") String baseProId, Model uiModel) {
		uiModel.addAttribute("ggzyBasePro",
				ggzyBaseProService.findGgzyBasePro(baseProId));
		uiModel.addAttribute("itemId", baseProId);
		return "ggzybaseproes/show";
	}

	@RequestMapping(produces = "text/html")
	public String GgzyBaseProController.list(ServletRequest request, Page page,
			Model map) {
		Specification<GgzyBasePro> specification = DynamicSpecifications
				.bySearchFilter(request, GgzyBasePro.class);
		map.addAttribute("page", page);
		List<GgzyBasePro> list = ggzyBaseProService.findByExample(
				specification, page);
		map.addAttribute("list", list);
		return "ggzybaseproes/list";
	}

	@RequestMapping(value="/update")
	public @ResponseBody String GgzyBaseProController.update(@Valid GgzyBasePro ggzyBasePro,
			BindingResult bindingResult, Model uiModel,
			HttpServletRequest httpServletRequest) {
		if (bindingResult.hasErrors()) {
			populateEditForm(uiModel, ggzyBasePro);
			return "ggzybaseproes/update";
		}
		uiModel.asMap().clear();
		ggzyBaseProService.updateGgzyBasePro(ggzyBasePro);
		/*return "redirect:/ggzybaseproes/"
				+ encodeUrlPathSegment(ggzyBasePro.getBaseProId().toString(),
						httpServletRequest);*/
		return AjaxObject.newOk("修改成功！").toString();
	}

	@RequestMapping(value = "/{baseProId}", params = "form")
	public String GgzyBaseProController.updateForm(
			@PathVariable("baseProId") String baseProId, Model uiModel) {
		populateEditForm(uiModel, ggzyBaseProService.findGgzyBasePro(baseProId));
		return "ggzybaseproes/update";
	}

	@RequestMapping(value = "/{baseProId}", method = RequestMethod.DELETE)
	public String GgzyBaseProController.delete(
			@PathVariable("baseProId") String baseProId,
			@RequestParam(value = "page", required = false) Integer page,
			@RequestParam(value = "size", required = false) Integer size,
			Model uiModel) {
		GgzyBasePro ggzyBasePro = ggzyBaseProService.findGgzyBasePro(baseProId);
		ggzyBaseProService.deleteGgzyBasePro(ggzyBasePro);
		uiModel.asMap().clear();
		uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
		uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
		return "redirect:/ggzybaseproes";
	}

	@RequestMapping(value="/delete",method = RequestMethod.POST)
	public @ResponseBody
	String GgzyBaseProController.deleteManey(@RequestParam("ids") String[] ids) {
		for (String id : ids) {
			GgzyBasePro item = ggzyBaseProService.findGgzyBasePro(id);
			ggzyBaseProService.deleteGgzyBasePro(item);
		}
		return AjaxObject.newOk("删除项目成功！").setCallbackType("").toString();
	}

	void GgzyBaseProController.populateEditForm(Model uiModel,
			GgzyBasePro ggzyBasePro) {
		uiModel.addAttribute("ggzyBasePro", ggzyBasePro);
		uiModel.addAttribute("ggzybidproes",
				ggzyBidProService.findAllGgzyBidProes());
	}

	String GgzyBaseProController.encodeUrlPathSegment(String pathSegment,
			HttpServletRequest httpServletRequest) {
		String enc = httpServletRequest.getCharacterEncoding();
		if (enc == null) {
			enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
		}
		try {
			pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
		} catch (UnsupportedEncodingException uee) {
		}
		return pathSegment;
	}

}
