// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.lmd.ggzy.domain.GgzyAssessmentExpert;
import com.lmd.ggzy.domain.GgzyExpertApply;
import com.lmd.ggzy.service.GgzyAssessmentExpertService;
import com.lmd.ggzy.service.GgzyExpertApplyService;

privileged aspect GgzyExpertApplyController_Roo_Controller {
	private static final String EXTRACT_SUCCESS = "extract_success";
    
    @Autowired
    GgzyExpertApplyService GgzyExpertApplyController.ggzyExpertApplyService;
    @Autowired
    GgzyAssessmentExpertService GgzyExpertApplyController.ggzyAssessmentExpertService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyExpertApplyController.create(@Valid GgzyExpertApply ggzyExpertApply, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
    	System.out.println(ggzyExpertApply.getNoticeTenders().getId().toJson());
    	AjaxObject status = null;
        if (bindingResult.hasErrors()) {
        	status = AjaxObject.newError(bindingResult.getFieldError().getDefaultMessage());
        }else{
        	uiModel.asMap().clear();
        	 ggzyExpertApplyService.saveGgzyExpertApply(ggzyExpertApply);
	        status = AjaxObject.newOk(EXTRACT_SUCCESS, true);
        }
        uiModel.addAttribute(ControllerConst.STATUS, status);
        return ControllerConst.JSON_STATUS_VIEW;
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyExpertApplyController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyExpertApply());
        return "ggzyexpertapplys/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String GgzyExpertApplyController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("ggzyexpertapply", ggzyExpertApplyService.findGgzyExpertApply(id));
        uiModel.addAttribute("itemId", id);
        return "ggzyexpertapplys/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GgzyExpertApplyController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ggzyexpertapplys", ggzyExpertApplyService.findGgzyExpertApplyEntries(firstResult, sizeNo));
            float nrOfPages = (float) ggzyExpertApplyService.countAllGgzyExpertApplys() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ggzyexpertapplys", ggzyExpertApplyService.findAllGgzyExpertApplys());
        }
        return "ggzyexpertapplys/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyExpertApplyController.update(@Valid GgzyExpertApply ggzyExpertApply, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
    	AjaxObject status = null;
        if (bindingResult.hasErrors()) {
        	status = AjaxObject.newError(bindingResult.getFieldErrors().toString());
        }else{
	        uiModel.asMap().clear();
	        for(GgzyAssessmentExpert assessmentExpert : ggzyExpertApply.getAssessmentExperts()){
	        	assessmentExpert.setExpertApply(ggzyExpertApply);
	        	ggzyAssessmentExpertService.updateGgzyAssessmentExpert(assessmentExpert);
	        	
	        }
	        ggzyExpertApplyService.updateGgzyExpertApply(ggzyExpertApply);
	        status = AjaxObject.newOk(ControllerConst.SAVE_SUCCESS, true);
        }
        uiModel.addAttribute(ControllerConst.STATUS, status);
        return ControllerConst.JSON_STATUS_VIEW;
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String GgzyExpertApplyController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, ggzyExpertApplyService.findGgzyExpertApply(id));
        return "ggzyexpertapplys/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyExpertApplyController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyExpertApply ggzyExpertApply = ggzyExpertApplyService.findGgzyExpertApply(id);
        ggzyExpertApplyService.deleteGgzyExpertApply(ggzyExpertApply);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzyexpertapplys";
    }
    
    void GgzyExpertApplyController.populateEditForm(Model uiModel, GgzyExpertApply ggzyExpertApply) {
        uiModel.addAttribute("ggzyExpertApply", ggzyExpertApply);
    }
    
    String GgzyExpertApplyController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
