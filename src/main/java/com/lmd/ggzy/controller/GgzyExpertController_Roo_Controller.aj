// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import java.io.UnsupportedEncodingException;
import java.util.List;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.lmd.ggzy.domain.GgzyExpert;
import com.lmd.ggzy.service.GgzyExpertService;

privileged aspect GgzyExpertController_Roo_Controller {
    
    @Autowired
    GgzyExpertService GgzyExpertController.ggzyExpertService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyExpertController.create(@Valid GgzyExpert ggzyExpert, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
    	AjaxObject status ;
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyExpert);
            status = AjaxObject.newError(bindingResult.getFieldError().getDefaultMessage());
        }else{
	        uiModel.asMap().clear();
	        ggzyExpertService.saveGgzyExpert(ggzyExpert);
	        status = AjaxObject.newOk(ControllerConst.ADD_SUCCESS, true);
        }
        uiModel.addAttribute(ControllerConst.STATUS, status);
        return ControllerConst.JSON_STATUS_VIEW;
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyExpertController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyExpert());
        return "ggzyexperts/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String GgzyExpertController.show(@PathVariable("id") String id, Model uiModel) {
        uiModel.addAttribute("ggzyExpert", ggzyExpertService.findGgzyExpert(id));
        uiModel.addAttribute("itemId", id);
        return "ggzyexperts/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GgzyExpertController.list(ServletRequest request, Page page, Model uiModel) {
    	Specification<GgzyExpert> specifition = DynamicSpecifications.bySearchFilter(request, GgzyExpert.class);
    	List<GgzyExpert> list = ggzyExpertService.findByExample(specifition, page); 
    	uiModel.addAttribute("list", list);
        return "ggzyexperts/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyExpertController.update(@Valid GgzyExpert ggzyExpert, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyExpert);
            return "ggzyexperts/update";
        }
        uiModel.asMap().clear();
        ggzyExpertService.updateGgzyExpert(ggzyExpert);
        return "redirect:/ggzyexperts/" + encodeUrlPathSegment(ggzyExpert.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String GgzyExpertController.updateForm(@PathVariable("id") String id, Model uiModel) {
        populateEditForm(uiModel, ggzyExpertService.findGgzyExpert(id));
        return "ggzyexperts/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyExpertController.delete(@PathVariable("id") String id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyExpert ggzyExpert = ggzyExpertService.findGgzyExpert(id);
        ggzyExpertService.deleteGgzyExpert(ggzyExpert);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzyexperts";
    }
    
    @RequestMapping(value = "/delete")
	public @ResponseBody
	String GgzyExpertController.deleteManey(
			@RequestParam("ids") String[] ids) {
		for (String id : ids) {
			GgzyExpert obj = ggzyExpertService
					.findGgzyExpert(id);
			ggzyExpertService
					.deleteGgzyExpert(obj);
		}
		return AjaxObject.newOk("删除成功！").setCallbackType("").toString();
	}
    
    
    void GgzyExpertController.populateEditForm(Model uiModel, GgzyExpert ggzyExpert) {
        uiModel.addAttribute("ggzyExpert", ggzyExpert);
    }
    
    String GgzyExpertController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
