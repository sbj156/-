// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.controller;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.ketayao.ketacustom.util.dwz.AjaxObject;
import com.ketayao.ketacustom.util.dwz.Page;
import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.lmd.ggzy.domain.GgzyBidSite;
import com.lmd.ggzy.service.GgzyBidSiteService;
import com.lmd.util.CollectionUtil;
import com.lmd.util.DateUtils;
import com.lmd.util.ExcelUtil;
import freemarker.template.utility.StringUtil;
import net.sf.excelutils.ExcelException;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import javax.persistence.criteria.*;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

privileged aspect GgzyBidSiteController_Roo_Controller {

    @Autowired
    GgzyBidSiteService GgzyBidSiteController.ggzyBidSiteService;

    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GgzyBidSiteController.create(@Valid GgzyBidSite ggzyBidSite, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        AjaxObject status;
        if (bindingResult.hasErrors()) {
            status = AjaxObject.newError(bindingResult.getFieldError().getDefaultMessage());
        } else {
            uiModel.asMap().clear();
            ggzyBidSiteService.saveGgzyBidSite(ggzyBidSite);
            status = AjaxObject.newOk(ControllerConst.SAVE_SUCCESS, true);
        }
        uiModel.addAttribute(ControllerConst.STATUS, status);
        return ControllerConst.JSON_STATUS_VIEW;
    }

    @RequestMapping(params = "form", produces = "text/html")
    public String GgzyBidSiteController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GgzyBidSite());
        return "ggzybidsites/create";
    }

    @RequestMapping(value = "/{id}", produces = "text/html")
    public String GgzyBidSiteController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ggzybidsite", ggzyBidSiteService.findGgzyBidSite(id));
        uiModel.addAttribute("itemId", id);
        return "ggzybidsites/show";
    }

    @RequestMapping(produces = "text/html")
    public String GgzyBidSiteController.list(ServletRequest request, Page page, Model uiModel, final @RequestParam(value = "time", required = false) String time) {

        Specifications<GgzyBidSite> spec_ = Specifications.where(new Specification<GgzyBidSite>() {
            @Override
            public Predicate toPredicate(Root<GgzyBidSite> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                // TODO Auto-generated method stub
                Expression bidTime = cb.function("decode", Date.class, root.get("qua"), cb.literal("1"), root.get("notice").get("quaTime"), root.get("notice").get("bidDocSubEndtime"));
                Expression queryTime = null;
                if (StringUtils.isEmpty(time)) {
                    queryTime = cb.currentDate();
                } else {
                    queryTime = cb.function("to_date", Date.class, cb.literal(time), cb.literal("yyyy-mm-dd"));
                }

                return cb.equal(cb.function("trunc", String.class, bidTime, cb.literal("iw")), cb.function("trunc", String.class, queryTime, cb.literal("iw")));
            }
        });

        Specification<GgzyBidSite> spec = DynamicSpecifications.bySearchFilter(request, GgzyBidSite.class);
        spec_ = spec_.and(spec);
        List<GgzyBidSite> list = ggzyBidSiteService.findByExample(spec_, page);
        uiModel.addAttribute("list", list);
        return "ggzybidsites/list";
    }

    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GgzyBidSiteController.update(@Valid GgzyBidSite ggzyBidSite, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ggzyBidSite);
            return "ggzybidsites/update";
        }
        uiModel.asMap().clear();
        ggzyBidSiteService.updateGgzyBidSite(ggzyBidSite);
        return "redirect:/ggzybidsites/" + encodeUrlPathSegment(ggzyBidSite.getId().toString(), httpServletRequest);
    }

    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String GgzyBidSiteController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, ggzyBidSiteService.findGgzyBidSite(id));
        return "ggzybidsites/update";
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String GgzyBidSiteController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GgzyBidSite ggzyBidSite = ggzyBidSiteService.findGgzyBidSite(id);
        ggzyBidSiteService.deleteGgzyBidSite(ggzyBidSite);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ggzybidsites";
    }

    void GgzyBidSiteController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ggzyBidSite_time_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }

    void GgzyBidSiteController.populateEditForm(Model uiModel, GgzyBidSite ggzyBidSite) {
        uiModel.addAttribute("ggzyBidSite", ggzyBidSite);
        addDateTimeFormatPatterns(uiModel);
    }

    String GgzyBidSiteController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {
        }
        return pathSegment;
    }

    @RequestMapping(produces = "text/html", value = "/export")
    public void GgzyBidSiteController.export(ServletRequest request,HttpServletResponse response, Page page, Model uiModel, final @RequestParam(value = "time", required = false) String time) {


        Specifications<GgzyBidSite> spec_ = Specifications.where(new Specification<GgzyBidSite>() {
            @Override
            public Predicate toPredicate(Root<GgzyBidSite> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                // TODO Auto-generated method stub
                Expression bidTime = cb.function("decode", Date.class, root.get("qua"), cb.literal("1"), root.get("notice").get("quaTime"), root.get("notice").get("bidDocSubEndtime"));
                Expression queryTime = null;
                if (StringUtils.isEmpty(time)) {
                    queryTime = cb.currentDate();
                } else {
                    queryTime = cb.function("to_date", Date.class, cb.literal(time), cb.literal("yyyy-mm-dd"));
                }

                return cb.equal(cb.function("trunc", String.class, bidTime, cb.literal("iw")), cb.function("trunc", String.class, queryTime, cb.literal("iw")));
            }
        });

        Specification<GgzyBidSite> spec = DynamicSpecifications.bySearchFilter(request, GgzyBidSite.class);
        spec_ = spec_.and(spec);
        page.setNumPerPage(Integer.MAX_VALUE);
        List<GgzyBidSite> list = ggzyBidSiteService.findByExample(spec_, page);
        uiModel.addAttribute("list", list);
        Date date = null;
        if (StringUtils.isEmpty(time))
            date = new Date();
        else
            try {
                date = DateUtils.getDayOfWeek(DateUtils.parseDate(time, "yyyy-MM-dd"), 0);
            } catch (Exception e) {
            }


        Map<String, Object> exportData = new HashMap<String, Object>();
        exportData.put("start", DateFormatUtils.format(DateUtils.getFirstDayOfWeek(date), "yyyy-MM-dd"));
        exportData.put("end", DateFormatUtils.format(DateUtils.getDayOfWeek(date, 4), "yyyy-MM-dd"));

        exportData.put("util", new CollectionUtils());
        ExcelUtil excelUtil = new ExcelUtil();

        List<Map<String, Object>> dataList = Lists.newArrayList();
        for(GgzyBidSite item: list){
            Map<String, Object> item_ = Maps.newHashMap();
            item_.put("bidDate", DateFormatUtils.format(item.isQua()? item.getNotice().getQuaTime():item.getNotice()
                    .getBidDocSubEndtime(), "yyyy-MM-dd"));
            item_.put("bidTime", DateFormatUtils.format(item.isQua()? item.getNotice().getQuaTime():item.getNotice()
                    .getBidDocSubEndtime(), "HH:mm"));
            item_.put("applySize", item.getNotice().getGgzyApplies().size());
            item_.put("obj", item);
            dataList.add(item_);
        }
        exportData.put("list", dataList);
        try {
            excelUtil.exportExcel(response, "bidsites.xls", exportData, DateFormatUtils.format(DateUtils.getDayOfWeek
                    (date, 4), "yyyy年第w周")
                    + "场所安排");
        } catch (ExcelException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }}