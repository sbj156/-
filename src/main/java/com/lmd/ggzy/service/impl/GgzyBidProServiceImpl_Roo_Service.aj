// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.service.impl;

import java.util.Calendar;
import java.util.List;

import javax.persistence.EntityManager;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.lmd.ggzy.Application;
import com.lmd.ggzy.domain.GgzyBasePro;
import com.lmd.ggzy.domain.GgzyBidPro;
import com.lmd.ggzy.repository.GgzyBaseProRepository;
import com.lmd.ggzy.repository.GgzyBidProRepository;
import com.lmd.ggzy.repository.GgzyBusinessTypeRepository;
import com.lmd.ggzy.repository.GgzyBusinessWayRepository;
import com.lmd.ggzy.repository.GgzyMajorTypeRepository;
import com.lmd.ggzy.repository.GgzyTreeLibRepository;

privileged aspect GgzyBidProServiceImpl_Roo_Service {
    
    declare @type: GgzyBidProServiceImpl: @Service;
    
    declare @type: GgzyBidProServiceImpl: @Transactional;
    
    @Autowired
    GgzyBidProRepository GgzyBidProServiceImpl.ggzyBidProRepository;
    @Autowired
    GgzyBaseProRepository GgzyBidProServiceImpl.ggzyBaseProRepository;
    @Autowired
    GgzyBusinessTypeRepository GgzyBidProServiceImpl.businessTypeRepository;
    @Autowired
    GgzyMajorTypeRepository GgzyBidProServiceImpl.majorTypeRepository;
    @Autowired
    GgzyTreeLibRepository GgzyBidProServiceImpl.treeLibRepository;
    @Autowired
    GgzyBusinessWayRepository GgzyBidProServiceImpl.businessWayRepository;
    @Autowired
    private Application GgzyBidProServiceImpl.application;
    public long GgzyBidProServiceImpl.countAllGgzyBidProes() {
        return ggzyBidProRepository.count();
    }
    
    public void GgzyBidProServiceImpl.deleteGgzyBidPro(GgzyBidPro ggzyBidPro) {
        ggzyBidProRepository.delete(ggzyBidPro);
    }
    
    public GgzyBidPro GgzyBidProServiceImpl.findGgzyBidPro(String id) {
        return ggzyBidProRepository.findOne(id);
    }
    
    public List<GgzyBidPro> GgzyBidProServiceImpl.findAllGgzyBidProes() {
        return ggzyBidProRepository.findAll();
    }
    
    public List<GgzyBidPro> GgzyBidProServiceImpl.findGgzyBidProEntries(int firstResult, int maxResults) {
        return ggzyBidProRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
    }
    
    public void GgzyBidProServiceImpl.saveGgzyBidPro(GgzyBidPro ggzyBidPro) {
    	GgzyBasePro basePro = ggzyBidPro.getBasePro();
    	/**
    	 * 判断basePro在数据库中是否已存在
    	 */
    	if(StringUtils.isEmpty(basePro.getBaseProId())){
    		/**
        	 * 保存時同步項目名称,生成项目编号,招标项目编号
        	 */
        	if(StringUtils.isEmpty(basePro.getProName()))
        		basePro.setProName(ggzyBidPro.getBidProName());
        	/**
        	 * 生成项目编号
        	 */
        	int currySN = ggzyBaseProRepository.getCurrySN();
        	basePro.setProCode(String.format("%s%06d", application.getPlatform_code(), currySN + 1));
        	basePro = ggzyBaseProRepository.save(basePro);
        	/**
        	 * 生成招标项目编号,项目编号 + 3位顺序号,由于保存后hibernate才能加载basePro,所以保存后再生成招标项目编号
        	 */
        	ggzyBidPro.setBidProCode(basePro.getProCode() + "001");
        	ggzyBidPro.setBasePro(basePro);
    	}else{
    		basePro = ggzyBaseProRepository.findOne(basePro.getBaseProId());
    		int currySN = ggzyBidProRepository.getBidProCodeSN(basePro.getBaseProId());
    		ggzyBidPro.setBidProCode(String.format("%s%03d", basePro.getProCode(), currySN + 1));
    	}
    	/**
    	 * 生成公共资源项目编号 年(4)业务类型(2)专业类型(2)区域(2)顺序号(4)
    	 */
    	ggzyBidPro.setBusinessType(businessTypeRepository.findOne(ggzyBidPro.getBusinessType().getBusinessTypeId()));
    	ggzyBidPro.setMajorType(majorTypeRepository.findOne(ggzyBidPro.getMajorType().getMajorTypeId()));
    	ggzyBidPro.setBusinessWay(businessWayRepository.findOne(ggzyBidPro.getBusinessWay().getBusinessWayId()));
    	basePro.setArea(treeLibRepository.findOne(basePro.getArea().getId()));
    	String jn_pro_code = Calendar.getInstance().get(Calendar.YEAR) + ggzyBidPro.getBusinessType().getCode() + ggzyBidPro.getMajorType().getCode() + basePro.getArea().getCode() + ggzyBidPro.getBusinessWay().getCode();
    	jn_pro_code += String.format("%04d", ggzyBidProRepository.getJnProCodeSN(jn_pro_code) + 1);
    	ggzyBidPro.setProCode(jn_pro_code);
    	/**
    	 * 铁路工程招标人为代理机构
    	 */
    	if(ggzyBidPro.getBusinessType().getCode().equals("TL")){
    		ggzyBidPro.setAgency(ggzyBidPro.getTenderee());
    	}
        ggzyBidProRepository.save(ggzyBidPro);
    }
    
    public GgzyBidPro GgzyBidProServiceImpl.updateGgzyBidPro(GgzyBidPro ggzyBidPro) {
        return ggzyBidProRepository.save(ggzyBidPro);
    }
    
}
