// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.service.impl;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.lmd.ggzy.domain.GgzyBidSite;
import com.lmd.ggzy.domain.GgzyNotice;
import com.lmd.ggzy.domain.GgzyNoticeTenders;
import com.lmd.ggzy.domain.GgzyTenders;
import com.lmd.ggzy.repository.GgzyBidSiteRepository;
import com.lmd.ggzy.repository.GgzyNoticeRepository;
import com.lmd.ggzy.repository.GgzyNoticeTendersRepository;
import com.lmd.ggzy.repository.GgzyTendersRepository;

privileged aspect GgzyNoticeServiceImpl_Roo_Service {
    
    declare @type: GgzyNoticeServiceImpl: @Service;
    
    declare @type: GgzyNoticeServiceImpl: @Transactional;
    
    @Autowired
    GgzyNoticeRepository GgzyNoticeServiceImpl.ggzyNoticeRepository;
    
    @Autowired
    GgzyTendersRepository GgzyNoticeServiceImpl.ggzyTendersRepository;
    
    @Autowired
    GgzyNoticeTendersRepository GgzyNoticeServiceImpl.noticeTendersRepository;
    
    @Autowired
    GgzyBidSiteRepository GgzyNoticeServiceImpl.bidSiteRepository;
    
    public long GgzyNoticeServiceImpl.countAllGgzyNotices() {
        return ggzyNoticeRepository.count();
    }
    
    public void GgzyNoticeServiceImpl.deleteGgzyNotice(GgzyNotice ggzyNotice) {
        ggzyNoticeRepository.delete(ggzyNotice);
    }
    
    public GgzyNotice GgzyNoticeServiceImpl.findGgzyNotice(String id) {
        return ggzyNoticeRepository.findOne(id);
    }
    
    public List<GgzyNotice> GgzyNoticeServiceImpl.findAllGgzyNotices() {
        return ggzyNoticeRepository.findAll();
    }
    
    public List<GgzyNotice> GgzyNoticeServiceImpl.findGgzyNoticeEntries(int firstResult, int maxResults) {
        return ggzyNoticeRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
    }
    
    public GgzyNotice GgzyNoticeServiceImpl.saveGgzyNotice(GgzyNotice ggzyNotice) {
       return ggzyNoticeRepository.save(ggzyNotice);
    }
    public GgzyNotice GgzyNoticeServiceImpl.updateGgzyNotice(GgzyNotice ggzyNotice) {
        return ggzyNoticeRepository.save(ggzyNotice);
    }
    public GgzyNotice GgzyNoticeServiceImpl.makeNotice(GgzyNotice notice, String[] tendersIds){
    	
    	
    	notice.setNoticeTenderses(null);
    	notice = saveGgzyNotice(notice);
    	if(notice.isQua() && notice.getProQuaResult() == null){
    		notice.setQuaTime(notice.getBidDocSubEndtime());
    	}
    	/**
    	 * 场所预约信息
    	 * 开标时间在公告中,预约信息不存开标时间,只考虑新增情况
    	 */
    	if(!notice.isQua() && notice.getBidSite() == null && notice.getBidDocSubEndtime() != null){
    		GgzyBidSite bidSite = new GgzyBidSite();
    		bidSite.setNotice(notice);
    		bidSite.setQua(notice.isQua());
    		bidSiteRepository.save(bidSite);
    	}
    	if(tendersIds != null){//tendersIds不为空,修改关联标段
    		Set<GgzyNoticeTenders> noticeTenderses = new HashSet<GgzyNoticeTenders>();
    		/*
    		 * 查询原关联标段,remove tendersIds中的标段,即为要删除的标段
    		 */
    		Set<GgzyNoticeTenders> noticeTendersesOld = null;
			try {
				noticeTendersesOld = findGgzyNotice(notice.getNoticeId()).getNoticeTenderses();
			} catch (Exception e) {
				// TODO Auto-generated catch block
			}
	        for(String tendersId : tendersIds){
	        	GgzyTenders tenders = ggzyTendersRepository.findOne(tendersId);
	        	tenders.setNotice(notice);
	        	tenders.setStatus(1);
	        	GgzyNoticeTenders noticeTenders = new GgzyNoticeTenders(tenders.getTendersId(), notice.getNoticeId());
	        	noticeTenders.setNotice(notice);
	        	noticeTenderses.add(noticeTenders);
//	        	noticeTenders.setBidTime(notice.getBidDocSubEndtime());
	        	ggzyTendersRepository.save(tenders);
	        	noticeTenders = noticeTendersRepository.save(noticeTenders);
	        	if(noticeTendersesOld != null)
	        		noticeTendersesOld.remove(noticeTenders);
	        }
	        if(noticeTendersesOld != null)
		        for(GgzyNoticeTenders o : noticeTendersesOld){
		        	GgzyTenders tenders  = o.getTenders();
		        	tenders.setNotice(null);
		        	ggzyTendersRepository.save(tenders);
		        	noticeTendersRepository.delete(o);
		        }
        }
//    	saveGgzyNotice(notice);
    	return notice;
    }
}
