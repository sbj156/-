// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.service.impl;

import com.lmd.ggzy.domain.GgzyBidSite;
import com.lmd.ggzy.domain.GgzyNotice;
import com.lmd.ggzy.domain.GgzyNoticeTenders;
import com.lmd.ggzy.domain.pk.GgzyNoticeTendersPk;
import com.lmd.ggzy.repository.GgzyBidSiteRepository;
import com.lmd.ggzy.repository.GgzyNoticeRepository;
import com.lmd.ggzy.repository.GgzyNoticeTendersRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

privileged aspect GgzyBidSiteServiceImpl_Roo_Service {

    declare @type: GgzyBidSiteServiceImpl:@Service;

    declare @type: GgzyBidSiteServiceImpl:@Transactional;

    @Autowired
    GgzyBidSiteRepository GgzyBidSiteServiceImpl.ggzyBidSitRepository;

    @Autowired
    GgzyNoticeRepository GgzyBidSiteServiceImpl.noticeRepository;

    @Autowired
    GgzyNoticeTendersRepository GgzyBidSiteServiceImpl.noticeTendersRepository;
    public long GgzyBidSiteServiceImpl.countAllGgzyBidSites() {
        return ggzyBidSitRepository.count();
    }

    public void GgzyBidSiteServiceImpl.deleteGgzyBidSite(GgzyBidSite ggzyBidSite) {
        ggzyBidSitRepository.delete(ggzyBidSite);
    }

    public GgzyBidSite GgzyBidSiteServiceImpl.findGgzyBidSite(Long id) {
        return ggzyBidSitRepository.findOne(id);
    }

    public List<GgzyBidSite> GgzyBidSiteServiceImpl.findAllGgzyBidSites() {
        return ggzyBidSitRepository.findAll();
    }

    public List<GgzyBidSite> GgzyBidSiteServiceImpl.findGgzyBidSiteEntries(int firstResult, int maxResults) {
        return ggzyBidSitRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
    }

    public void GgzyBidSiteServiceImpl.saveGgzyBidSite(GgzyBidSite ggzyBidSite) {
        /**
         * 此处在系统中只有资格预审在二次预约时会用到
         * 在保存时,同步保存noticeTenders中的开标时间
         */
        if (ggzyBidSite.getTenders() == null) {
            GgzyNotice notice = noticeRepository.findOne(ggzyBidSite.getNotice().getNoticeId());
            notice.setBidDocSubEndtime(ggzyBidSite.getNotice().getBidDocSubEndtime());
            noticeRepository.save(notice);
            for (GgzyNoticeTenders noticeTenders : notice.getNoticeTenderses()) {
//                noticeTenders.setBidTime(ggzyBidSite.getNotice().getBidDocSubEndtime());
                noticeTendersRepository.save(noticeTenders);
            }
        }else{
            GgzyNoticeTenders noticeTenders = noticeTendersRepository.findOne(new GgzyNoticeTendersPk
                    (ggzyBidSite.getTenders().getTendersId(), ggzyBidSite.getNotice().getNoticeId()));
            noticeTenders.setBidTime(ggzyBidSite.getNotice().getBidDocSubEndtime());
        }

        ggzyBidSite = ggzyBidSitRepository.save(ggzyBidSite);

    }

    public GgzyBidSite GgzyBidSiteServiceImpl.updateGgzyBidSite(GgzyBidSite ggzyBidSite) {
        return ggzyBidSitRepository.save(ggzyBidSite);
    }

}
