// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lmd.ggzy.service.impl;

import java.util.List;
import java.util.Map;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ketayao.ketacustom.util.persistence.DynamicSpecifications;
import com.ketayao.ketacustom.util.persistence.SearchFilter.Operator;
import com.lmd.ggzy.domain.GgzyBidDoc;
import com.lmd.ggzy.repository.GgzyBidDocRepository;
import com.lmd.util.BeanUtil;

privileged aspect GgzyBidDocServiceImpl_Roo_Service {
    
    declare @type: GgzyBidDocServiceImpl: @Service;
    
    declare @type: GgzyBidDocServiceImpl: @Transactional;
    
    @Autowired
    GgzyBidDocRepository GgzyBidDocServiceImpl.ggzyBidDocRepository;
    
    public long GgzyBidDocServiceImpl.countAllGgzyBidDocs() {
        return ggzyBidDocRepository.count();
    }
    
    public void GgzyBidDocServiceImpl.deleteGgzyBidDoc(GgzyBidDoc ggzyBidDoc) {
        ggzyBidDocRepository.delete(ggzyBidDoc);
    }
    
    public GgzyBidDoc GgzyBidDocServiceImpl.findGgzyBidDoc(String id) {
        return ggzyBidDocRepository.findOne(id);
    }
    
    public List<GgzyBidDoc> GgzyBidDocServiceImpl.findAllGgzyBidDocs() {
        return ggzyBidDocRepository.findAll();
    }
    
    public List<GgzyBidDoc> GgzyBidDocServiceImpl.findGgzyBidDocEntries(int firstResult, int maxResults) {
        return ggzyBidDocRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
    }
    
    public void GgzyBidDocServiceImpl.saveGgzyBidDoc(GgzyBidDoc ggzyBidDoc) {
    	if(ggzyBidDoc.getApplyTender() != null || ggzyBidDoc.getBidDocId() != null){
	    	Specification<GgzyBidDoc> specification = DynamicSpecifications.buildspecification(GgzyBidDoc.class, new String[]{"applyTender.applyTenderId"}, new com.ketayao.ketacustom.util.persistence.SearchFilter.Operator[]{Operator.EQ}, new Object[]{ggzyBidDoc.getApplyTender().getApplyTenderId()});
    		GgzyBidDoc ggzyBidDoc_ = null;
			try {
				List<GgzyBidDoc> list = ggzyBidDocRepository.findAll(specification);
				if(list.size() > 0)
					ggzyBidDoc_ = list.get(0);
				if(ggzyBidDoc_ != null){
	    			BeanUtil.copyProperties(ggzyBidDoc, ggzyBidDoc_, new BeanUtil.IgnoreNullFileter());
	    			ggzyBidDoc = ggzyBidDoc_;
	    		}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		
    		
    	}
        ggzyBidDocRepository.save(ggzyBidDoc);
    }
    
    public GgzyBidDoc GgzyBidDocServiceImpl.updateGgzyBidDoc(GgzyBidDoc ggzyBidDoc) {
        return ggzyBidDocRepository.save(ggzyBidDoc);
    }
    
}
